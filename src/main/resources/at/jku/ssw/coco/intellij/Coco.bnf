{
    parserClass="at.jku.ssw.coco.intellij.parser.CocoParser"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Coco"
    psiImplClassSuffix="Impl"
    psiPackage="at.jku.ssw.coco.intellij.psi"
    psiImplPackage="at.jku.ssw.coco.intellij.psi.impl"

    elementTypeHolderClass="at.jku.ssw.coco.intellij.psi.CocoTypes"
    elementTypeClass="at.jku.ssw.coco.intellij.psi.CocoElementType"
    tokenTypeClass="at.jku.ssw.coco.intellij.psi.CocoTokenType"

    psiImplUtilClass="at.jku.ssw.coco.intellij.psi.impl.CocoPsiImplUtil"

//    name("Symbols")="Symbols"

    tokens=[
        string='regexp:"([^\"\n]|\\"|)*"'
        char="regexp:'(\\u....|\\.|.)'"

        WHITE_SPACE='regexp:\s+'
        LINE_COMMENT='regexp://.*'
        BLOCK_COMMENT='regexp:/\*([^\*]|\*+[^/\*])*\*/'

        KEYWORD_COMPILER='COMPILER'
        KEYWORD_PRODUCTIONS='PRODUCTIONS'
        KEYWORD_END='END'
        KEYWORD_NESTED='NESTED'
        KEYWORD_TO='TO'
        KEYWORD_FROM='FROM'
        KEYWORD_CHARACTERS='CHARACTERS'
        KEYWORD_CONTEXT='CONTEXT'
        KEYWORD_TOKENS='TOKENS'
        KEYWORD_PRAGMAS='PRAGMAS'

        TERMINATOR='.'
        PLUS='+'
        MINUS='-'
        RANGE='..'
        ASSIGNMENT='='
        CURL_OPEN='{'
        CURL_CLOSE='}'
        PAR_OPEN='('
        PAR_CLOSE=')'
        BRACK_OPEN='['
        BRACK_CLOSE=']'
        SMALLER_THEN='<'
        SEM_ACTION_START='(.'
        SEM_ACTION_END='.)'
        PIPE='|'
        GREATER_THEN='>'

        digit='regexp:\p{Numeric}'
        ident='regexp:\p{Alpha}\p{Alnum}*'
        ANY_CHAR='regexp:.'
    ]
}

Cocol ::=
    [Imports]
    Compiler
    [GlobalFieldsAndMethods]
    ScannerSpecification
    ParserSpecification
    End

//COMPILER ::= "COMPILER"

Compiler ::= !<<EOF>> "COMPILER" ident {
    mixin="at.jku.ssw.coco.intellij.psi.impl.CocoNamedElementImpl"
    implements="at.jku.ssw.coco.intellij.psi.CocoNamedElement"
    methods=[getName setName getNameIdentifier getPresentation]
    pin=1
}

Imports ::= JavaCode
//
GlobalFieldsAndMethods ::= JavaCode

private JavaCode ::= {JavaSymbols}*
ANY ::= JavaSymbols
private ArbitraryText ::= (ident | string | char | digit | ANY_CHAR | '.')*
private ArbitraryStatements ::= {JavaSymbols}*
private JavaSymbols ::= (ident | string | char | digit | ANY_CHAR | Symbols | '.' | '||') {name = "Java Code"}

//ScannerSpecification =
// ["IGNORECASE"]
// ["CHARACTERS" {SetDecl}]
// ["TOKENS" {TokenDecl}]
// ["PRAGMAS" {PragmaDecl}]
// {CommentDecl}
// {WhiteSpaceDecl}.

ScannerSpecification ::=
    ["IGNORECASE"]
    [Characters]
    [Tokens]
    [Pragmas]
    {CommentDecl}*
    {WhiteSpaceDecl}*

Characters ::= !<<EOF>> "CHARACTERS" {SetDecl}*

SetDecl ::= ident '=' Set '.' {pin=1}

Set ::= BasicSet {('+'|'-') BasicSet}*
BasicSet ::= string | ident | char [".." char] | "ANY"

Tokens ::= "TOKENS" {TokenDecl}*
TokenDecl ::= Symbol ['=' TokenExpr '.']
TokenExpr ::= TokenTerm {'|' TokenTerm}*
TokenTerm ::= TokenFactor {TokenFactor}* ["CONTEXT" '(' TokenExpr ')']
TokenFactor ::= Symbol
    | '(' TokenExpr ')'
    | '[' TokenExpr ']'
    | '{' TokenExpr '}'
Symbol ::= ident | string | char


Pragmas ::= "PRAGMAS" {PragmaDecl}*
PragmaDecl ::= TokenDecl [SemAction]
SemAction ::= "(." ArbitraryStatements ".)"

CommentDecl ::= "COMMENTS" "FROM" TokenExpr "TO" TokenExpr ["NESTED"]

WhiteSpaceDecl ::= IGNORE Set

ParserSpecification ::= "PRODUCTIONS" {Production}*
Production ::= ident [FormalAttributes] [LocalDecl] '=' Expression '.'
Expression ::= Term {'|' Term}*
Term ::= [[Resolver] Factor {Factor}*]
Factor ::= ['WEAK'] Symbol [ActualAttributes]
    | '(' Expression ')'
    | '[' Expression ']'
    | '{' Expression '}'
| "ANY"
| "SYNC"
| SemAction
LocalDecl ::= SemAction
FormalAttributes ::= Attributes
ActualAttributes ::= Attributes
private Attributes ::= '<' ArbitraryText '>'
Resolver ::= "IF" '(' {ANY}* ')'

End ::= "END" ident '.'

private Symbols ::= '+' | '-'  | '=' | '(' | ')' | '<' | '>' | '{' | '}' | '[' | ']' | '..' {name = "Symbols"}
