/* The following code was generated by JFlex 1.4.3 on 24/03/15 11:16 */

package at.jku.ssw.coco.intellij;

import at.jku.ssw.coco.intellij.psi.CocoTypes;
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 24/03/15 11:16 from the specification file
 * <tt>C:/private/CocoR-Plugin/src/main/java/at/jku/ssw/coco/intellij/Coco.flex</tt>
 */
class CocoLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int PARSER = 22;
  public static final int IMPORT_STATE = 6;
  public static final int COMPILER = 8;
  public static final int STRING = 4;
  public static final int ATTRIBUTES = 26;
  public static final int WHITESPACEDECL = 20;
  public static final int TOKENS = 14;
  public static final int SEM_ACTION = 24;
  public static final int YYINITIAL = 0;
  public static final int BLOCK_COMMENT = 2;
  public static final int GLOBAL = 10;
  public static final int COMMENTDECL = 18;
  public static final int PRAGMAS = 16;
  public static final int SCANNER = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  1,  1,  3,  3,  4,  4,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  5, 5
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\7\1\3\1\1\1\0\1\3\1\2\16\7\4\0\1\3\1\0"+
    "\1\34\1\0\1\6\2\0\1\25\1\33\1\32\1\5\1\62\1\0"+
    "\1\63\1\26\1\4\1\21\11\10\1\0\1\27\1\64\1\61\1\60"+
    "\2\0\1\11\1\12\1\13\1\14\1\15\1\16\1\31\1\47\1\44"+
    "\1\6\1\52\1\45\1\42\1\53\1\41\1\43\1\6\1\46\1\51"+
    "\1\50\1\55\1\6\1\57\1\54\1\56\1\6\1\65\1\17\1\66"+
    "\1\0\1\6\1\0\1\23\1\23\3\6\1\23\2\6\1\35\3\6"+
    "\1\36\1\23\1\40\1\37\1\6\1\22\1\6\1\24\1\20\1\23"+
    "\4\6\1\67\1\30\1\70\1\0\41\7\2\0\4\6\4\0\1\6"+
    "\2\0\1\7\7\0\1\6\4\0\1\6\5\0\27\6\1\0\37\6"+
    "\1\0\u01ca\6\4\0\14\6\16\0\5\6\7\0\1\6\1\0\1\6"+
    "\21\0\160\7\5\6\1\0\2\6\2\0\4\6\10\0\1\6\1\0"+
    "\3\6\1\0\1\6\1\0\24\6\1\0\123\6\1\0\213\6\1\0"+
    "\5\7\2\0\236\6\11\0\46\6\2\0\1\6\7\0\47\6\7\0"+
    "\1\6\1\0\55\7\1\0\1\7\1\0\2\7\1\0\2\7\1\0"+
    "\1\7\10\0\33\6\5\0\3\6\15\0\5\7\6\0\1\6\4\0"+
    "\13\7\5\0\53\6\25\7\12\10\4\0\2\6\1\7\143\6\1\0"+
    "\1\6\10\7\1\0\6\7\2\6\2\7\1\0\4\7\2\6\12\10"+
    "\3\6\2\0\1\6\17\0\1\7\1\6\1\7\36\6\33\7\2\0"+
    "\131\6\13\7\1\6\16\0\12\10\41\6\11\7\2\6\4\0\1\6"+
    "\5\0\26\6\4\7\1\6\11\7\1\6\3\7\1\6\5\7\22\0"+
    "\31\6\3\7\104\0\1\6\1\0\13\6\67\0\33\7\1\0\4\7"+
    "\66\6\3\7\1\6\22\7\1\6\7\7\12\6\2\7\2\0\12\10"+
    "\1\0\7\6\1\0\7\6\1\0\3\7\1\0\10\6\2\0\2\6"+
    "\2\0\26\6\1\0\7\6\1\0\1\6\3\0\4\6\2\0\1\7"+
    "\1\6\7\7\2\0\2\7\2\0\3\7\1\6\10\0\1\7\4\0"+
    "\2\6\1\0\3\6\2\7\2\0\12\10\4\6\7\0\1\6\5\0"+
    "\3\7\1\0\6\6\4\0\2\6\2\0\26\6\1\0\7\6\1\0"+
    "\2\6\1\0\2\6\1\0\2\6\2\0\1\7\1\0\5\7\4\0"+
    "\2\7\2\0\3\7\3\0\1\7\7\0\4\6\1\0\1\6\7\0"+
    "\12\10\2\7\3\6\1\7\13\0\3\7\1\0\11\6\1\0\3\6"+
    "\1\0\26\6\1\0\7\6\1\0\2\6\1\0\5\6\2\0\1\7"+
    "\1\6\10\7\1\0\3\7\1\0\3\7\2\0\1\6\17\0\2\6"+
    "\2\7\2\0\12\10\1\0\1\6\17\0\3\7\1\0\10\6\2\0"+
    "\2\6\2\0\26\6\1\0\7\6\1\0\2\6\1\0\5\6\2\0"+
    "\1\7\1\6\7\7\2\0\2\7\2\0\3\7\10\0\2\7\4\0"+
    "\2\6\1\0\3\6\2\7\2\0\12\10\1\0\1\6\20\0\1\7"+
    "\1\6\1\0\6\6\3\0\3\6\1\0\4\6\3\0\2\6\1\0"+
    "\1\6\1\0\2\6\3\0\2\6\3\0\3\6\3\0\14\6\4\0"+
    "\5\7\3\0\3\7\1\0\4\7\2\0\1\6\6\0\1\7\16\0"+
    "\12\10\11\0\1\6\7\0\3\7\1\0\10\6\1\0\3\6\1\0"+
    "\27\6\1\0\12\6\1\0\5\6\3\0\1\6\7\7\1\0\3\7"+
    "\1\0\4\7\7\0\2\7\1\0\2\6\6\0\2\6\2\7\2\0"+
    "\12\10\22\0\2\7\1\0\10\6\1\0\3\6\1\0\27\6\1\0"+
    "\12\6\1\0\5\6\2\0\1\7\1\6\7\7\1\0\3\7\1\0"+
    "\4\7\7\0\2\7\7\0\1\6\1\0\2\6\2\7\2\0\12\10"+
    "\1\0\2\6\17\0\2\7\1\0\10\6\1\0\3\6\1\0\51\6"+
    "\2\0\1\6\7\7\1\0\3\7\1\0\4\7\1\6\10\0\1\7"+
    "\10\0\2\6\2\7\2\0\12\10\12\0\6\6\2\0\2\7\1\0"+
    "\22\6\3\0\30\6\1\0\11\6\1\0\1\6\2\0\7\6\3\0"+
    "\1\7\4\0\6\7\1\0\1\7\1\0\10\7\22\0\2\7\15\0"+
    "\60\6\1\7\2\6\7\7\4\0\10\6\10\7\1\0\12\10\47\0"+
    "\2\6\1\0\1\6\2\0\2\6\1\0\1\6\2\0\1\6\6\0"+
    "\4\6\1\0\7\6\1\0\3\6\1\0\1\6\1\0\1\6\2\0"+
    "\2\6\1\0\4\6\1\7\2\6\6\7\1\0\2\7\1\6\2\0"+
    "\5\6\1\0\1\6\1\0\6\7\2\0\12\10\2\0\4\6\40\0"+
    "\1\6\27\0\2\7\6\0\12\10\13\0\1\7\1\0\1\7\1\0"+
    "\1\7\4\0\2\7\10\6\1\0\44\6\4\0\24\7\1\0\2\7"+
    "\5\6\13\7\1\0\44\7\11\0\1\7\71\0\53\6\24\7\1\6"+
    "\12\10\6\0\6\6\4\7\4\6\3\7\1\6\3\7\2\6\7\7"+
    "\3\6\4\7\15\6\14\7\1\6\1\7\12\10\4\7\2\0\46\6"+
    "\1\0\1\6\5\0\1\6\2\0\53\6\1\0\u014d\6\1\0\4\6"+
    "\2\0\7\6\1\0\1\6\1\0\4\6\2\0\51\6\1\0\4\6"+
    "\2\0\41\6\1\0\4\6\2\0\7\6\1\0\1\6\1\0\4\6"+
    "\2\0\17\6\1\0\71\6\1\0\4\6\2\0\103\6\2\0\3\7"+
    "\40\0\20\6\20\0\125\6\14\0\u026c\6\2\0\21\6\1\0\32\6"+
    "\5\0\113\6\3\0\3\6\17\0\15\6\1\0\4\6\3\7\13\0"+
    "\22\6\3\7\13\0\22\6\2\7\14\0\15\6\1\0\3\6\1\0"+
    "\2\7\14\0\64\6\40\7\3\0\1\6\3\0\2\6\1\7\2\0"+
    "\12\10\41\0\3\7\2\0\12\10\6\0\130\6\10\0\51\6\1\7"+
    "\1\6\5\0\106\6\12\0\35\6\3\0\14\7\4\0\14\7\12\0"+
    "\12\10\36\6\2\0\5\6\13\0\54\6\4\0\21\7\7\6\2\7"+
    "\6\0\12\10\46\0\27\6\5\7\4\0\65\6\12\7\1\0\35\7"+
    "\2\0\1\7\12\10\6\0\12\10\15\0\1\6\130\0\5\7\57\6"+
    "\21\7\7\6\4\0\12\10\21\0\11\7\14\0\3\7\36\6\15\7"+
    "\2\6\12\10\54\6\16\7\14\0\44\6\24\7\10\0\12\10\3\0"+
    "\3\6\12\10\44\6\122\0\3\7\1\0\25\7\4\6\1\7\4\6"+
    "\3\7\2\6\11\0\300\6\47\7\25\0\4\7\u0116\6\2\0\6\6"+
    "\2\0\46\6\2\0\6\6\2\0\10\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\37\6\2\0\65\6\1\0\7\6\1\0\1\6"+
    "\3\0\3\6\1\0\7\6\3\0\4\6\2\0\6\6\4\0\15\6"+
    "\5\0\3\6\1\0\7\6\16\0\5\7\32\0\5\7\20\0\2\6"+
    "\23\0\1\6\13\0\5\7\5\0\6\7\1\0\1\6\15\0\1\6"+
    "\20\0\15\6\3\0\33\6\25\0\15\7\4\0\1\7\3\0\14\7"+
    "\21\0\1\6\4\0\1\6\2\0\12\6\1\0\1\6\3\0\5\6"+
    "\6\0\1\6\1\0\1\6\1\0\1\6\1\0\4\6\1\0\13\6"+
    "\2\0\4\6\5\0\5\6\4\0\1\6\21\0\51\6\u0a77\0\57\6"+
    "\1\0\57\6\1\0\205\6\6\0\4\6\3\7\2\6\14\0\46\6"+
    "\1\0\1\6\5\0\1\6\2\0\70\6\7\0\1\6\17\0\1\7"+
    "\27\6\11\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0"+
    "\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0\40\7\57\0"+
    "\1\6\u01d5\0\3\6\31\0\11\6\6\7\1\0\5\6\2\0\5\6"+
    "\4\0\126\6\2\0\2\7\2\0\3\6\1\0\132\6\1\0\4\6"+
    "\5\0\51\6\3\0\136\6\21\0\33\6\65\0\20\6\u0200\0\u19b6\6"+
    "\112\0\u51cd\6\63\0\u048d\6\103\0\56\6\2\0\u010d\6\3\0\20\6"+
    "\12\10\2\6\24\0\57\6\1\7\4\0\12\7\1\0\31\6\7\0"+
    "\1\7\120\6\2\7\45\0\11\6\2\0\147\6\2\0\4\6\1\0"+
    "\4\6\14\0\13\6\115\0\12\6\1\7\3\6\1\7\4\6\1\7"+
    "\27\6\5\7\20\0\1\6\7\0\64\6\14\0\2\7\62\6\21\7"+
    "\13\0\12\10\6\0\22\7\6\6\3\0\1\6\4\0\12\10\34\6"+
    "\10\7\2\0\27\6\15\7\14\0\35\6\3\0\4\7\57\6\16\7"+
    "\16\0\1\6\12\10\46\0\51\6\16\7\11\0\3\6\1\7\10\6"+
    "\2\7\2\0\12\10\6\0\27\6\3\0\1\6\1\7\4\0\60\6"+
    "\1\7\1\6\3\7\2\6\2\7\5\6\2\7\1\6\1\7\1\6"+
    "\30\0\3\6\2\0\13\6\5\7\2\0\3\6\2\7\12\0\6\6"+
    "\2\0\6\6\2\0\6\6\11\0\7\6\1\0\7\6\221\0\43\6"+
    "\10\7\1\0\2\7\2\0\12\10\6\0\u2ba4\6\14\0\27\6\4\0"+
    "\61\6\u2104\0\u016e\6\2\0\152\6\46\0\7\6\14\0\5\6\5\0"+
    "\1\6\1\7\12\6\1\0\15\6\1\0\5\6\1\0\1\6\1\0"+
    "\2\6\1\0\2\6\1\0\154\6\41\0\u016b\6\22\0\100\6\2\0"+
    "\66\6\50\0\15\6\3\0\20\7\20\0\7\7\14\0\2\6\30\0"+
    "\3\6\31\0\1\6\6\0\5\6\1\0\207\6\2\0\1\7\4\0"+
    "\1\6\13\0\12\10\7\0\32\6\4\0\1\6\1\0\32\6\13\0"+
    "\131\6\3\0\6\6\2\0\6\6\2\0\6\6\2\0\3\6\3\0"+
    "\2\6\3\0\2\6\22\0\3\7\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\2\2\1\1\5\3\1\1\1\4\1\5"+
    "\1\6\1\7\1\10\7\3\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\5\3\1\7\6\3"+
    "\1\22\1\0\1\23\12\24\1\25\2\22\1\25\4\22"+
    "\1\25\6\22\13\26\1\27\2\0\5\3\2\0\1\30"+
    "\1\0\2\3\1\31\1\3\1\32\11\3\1\31\1\3"+
    "\1\32\3\3\1\22\1\0\5\24\1\31\1\24\1\32"+
    "\3\24\14\22\1\31\1\22\1\32\3\22\5\26\1\31"+
    "\1\26\1\32\3\26\2\27\4\0\1\33\3\3\1\34"+
    "\1\3\1\35\1\0\1\35\1\0\10\3\1\33\3\3"+
    "\1\34\10\3\1\0\3\24\1\34\10\24\3\22\1\34"+
    "\1\22\2\0\7\22\3\26\1\34\10\26\1\0\1\36"+
    "\1\37\4\3\1\40\1\0\1\41\5\3\1\42\1\3"+
    "\1\43\3\3\1\40\4\3\1\42\1\3\1\43\1\0"+
    "\3\24\1\40\4\24\1\42\1\24\1\43\3\22\1\40"+
    "\1\0\4\22\1\42\1\22\1\43\3\26\1\40\4\26"+
    "\1\42\1\26\1\43\1\36\4\3\1\0\16\3\1\0"+
    "\10\24\3\22\1\0\5\22\10\26\4\3\1\0\1\44"+
    "\2\3\1\45\1\46\1\47\5\3\1\45\1\46\1\47"+
    "\5\24\1\45\1\46\1\47\3\22\1\0\2\22\1\45"+
    "\1\46\1\47\5\26\1\45\1\46\1\47\2\3\1\50"+
    "\1\3\1\51\3\3\1\50\1\3\1\51\2\3\1\24"+
    "\1\50\1\24\1\51\2\24\1\22\1\50\1\22\1\51"+
    "\2\22\1\26\1\50\1\26\1\51\2\26\1\52\1\53"+
    "\3\3\1\52\3\3\1\52\3\24\1\52\3\22\1\52"+
    "\3\26\6\3\3\24\3\22\3\26\1\54\1\3\1\55"+
    "\1\54\1\3\1\55\1\54\1\24\1\55\1\54\1\22"+
    "\1\55\1\54\1\26\1\55\5\56";

  private static int [] zzUnpackAction() {
    int [] result = new int[479];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\u011d\0\u0156\0\u018f"+
    "\0\u01c8\0\u0201\0\u023a\0\u0273\0\u02ac\0\u02e5\0\u031e\0\u0357"+
    "\0\u0390\0\u0156\0\u0156\0\u03c9\0\u0156\0\u0402\0\u043b\0\u0474"+
    "\0\u04ad\0\u04e6\0\u051f\0\u0558\0\u0156\0\u0156\0\u0156\0\u0156"+
    "\0\u0156\0\u0156\0\u0156\0\u0156\0\u0156\0\u0591\0\u05ca\0\u0603"+
    "\0\u063c\0\u0675\0\u0156\0\u06ae\0\u06e7\0\u0720\0\u0759\0\u0792"+
    "\0\u07cb\0\u0804\0\u083d\0\u0156\0\u0876\0\u08af\0\u08e8\0\u0921"+
    "\0\u095a\0\u0993\0\u09cc\0\u0a05\0\u0a3e\0\u0a77\0\u0ab0\0\u018f"+
    "\0\u0ae9\0\u0b22\0\u0b5b\0\u0b94\0\u0bcd\0\u0c06\0\u0c3f\0\u0c78"+
    "\0\u0cb1\0\u0cea\0\u0d23\0\u0d5c\0\u0d95\0\u0dce\0\u0e07\0\u0e40"+
    "\0\u0e79\0\u0eb2\0\u0eeb\0\u0f24\0\u0f5d\0\u0f96\0\u0fcf\0\u1008"+
    "\0\u1041\0\u107a\0\u10b3\0\u10ec\0\u1125\0\u115e\0\u1197\0\u11d0"+
    "\0\u1209\0\u1242\0\u0156\0\u127b\0\u12b4\0\u12ed\0\u023a\0\u1326"+
    "\0\u135f\0\u1398\0\u13d1\0\u140a\0\u1443\0\u147c\0\u14b5\0\u14ee"+
    "\0\u1527\0\u1560\0\u0591\0\u1599\0\u15d2\0\u160b\0\u1644\0\u167d"+
    "\0\u0156\0\u16b6\0\u16ef\0\u1728\0\u1761\0\u179a\0\u17d3\0\u0876"+
    "\0\u180c\0\u1845\0\u187e\0\u18b7\0\u18f0\0\u1929\0\u1962\0\u01c8"+
    "\0\u199b\0\u19d4\0\u1a0d\0\u1a46\0\u1a7f\0\u1ab8\0\u1af1\0\u1b2a"+
    "\0\u1b63\0\u199b\0\u1b9c\0\u1bd5\0\u1c0e\0\u1c47\0\u1c80\0\u1cb9"+
    "\0\u1cf2\0\u1d2b\0\u1d64\0\u1d9d\0\u0dce\0\u1dd6\0\u1e0f\0\u1e48"+
    "\0\u1e81\0\u1eba\0\u0156\0\u1ef3\0\u1f2c\0\u1f65\0\u1f9e\0\u1fd7"+
    "\0\u023a\0\u2010\0\u2049\0\u2082\0\u023a\0\u20bb\0\u0156\0\u20f4"+
    "\0\u1209\0\u212d\0\u2166\0\u219f\0\u21d8\0\u2211\0\u224a\0\u2283"+
    "\0\u22bc\0\u22f5\0\u0591\0\u232e\0\u2367\0\u23a0\0\u0591\0\u23d9"+
    "\0\u2412\0\u244b\0\u2484\0\u24bd\0\u24f6\0\u252f\0\u2568\0\u25a1"+
    "\0\u25da\0\u2613\0\u264c\0\u0876\0\u2685\0\u26be\0\u26f7\0\u2730"+
    "\0\u2769\0\u27a2\0\u27db\0\u2814\0\u284d\0\u2886\0\u28bf\0\u199b"+
    "\0\u28f8\0\u1ab8\0\u2931\0\u296a\0\u29a3\0\u29dc\0\u2a15\0\u2a4e"+
    "\0\u2a87\0\u2ac0\0\u2af9\0\u2b32\0\u2b6b\0\u0dce\0\u2ba4\0\u2bdd"+
    "\0\u2c16\0\u2c4f\0\u2c88\0\u2cc1\0\u2cfa\0\u2d33\0\u2d6c\0\u1f2c"+
    "\0\u0156\0\u2da5\0\u2dde\0\u2e17\0\u2e50\0\u023a\0\u2e89\0\u0156"+
    "\0\u2ec2\0\u2efb\0\u2f34\0\u2f6d\0\u2fa6\0\u023a\0\u2fdf\0\u023a"+
    "\0\u3018\0\u3051\0\u308a\0\u0591\0\u30c3\0\u30fc\0\u3135\0\u316e"+
    "\0\u0591\0\u31a7\0\u0591\0\u31e0\0\u3219\0\u3252\0\u328b\0\u0876"+
    "\0\u32c4\0\u32fd\0\u3336\0\u336f\0\u0876\0\u33a8\0\u0876\0\u33e1"+
    "\0\u341a\0\u3453\0\u199b\0\u348c\0\u34c5\0\u34fe\0\u3537\0\u3570"+
    "\0\u199b\0\u35a9\0\u199b\0\u35e2\0\u361b\0\u3654\0\u0dce\0\u368d"+
    "\0\u36c6\0\u36ff\0\u3738\0\u0dce\0\u3771\0\u0dce\0\u0156\0\u37aa"+
    "\0\u37e3\0\u381c\0\u3855\0\u388e\0\u38c7\0\u3900\0\u3939\0\u3972"+
    "\0\u39ab\0\u39e4\0\u3a1d\0\u3a56\0\u3a8f\0\u3ac8\0\u3b01\0\u3b3a"+
    "\0\u3b73\0\u3bac\0\u3be5\0\u3c1e\0\u3c57\0\u3c90\0\u3cc9\0\u3d02"+
    "\0\u3d3b\0\u3d74\0\u3dad\0\u3de6\0\u3e1f\0\u3e58\0\u3e91\0\u3eca"+
    "\0\u3f03\0\u3f3c\0\u3f75\0\u3fae\0\u3fe7\0\u4020\0\u4059\0\u4092"+
    "\0\u40cb\0\u4104\0\u413d\0\u4176\0\u41af\0\u41e8\0\u4221\0\u425a"+
    "\0\u4293\0\u023a\0\u42cc\0\u4305\0\u433e\0\u023a\0\u023a\0\u4377"+
    "\0\u43b0\0\u43e9\0\u4422\0\u445b\0\u4494\0\u0591\0\u0591\0\u44cd"+
    "\0\u4506\0\u453f\0\u4578\0\u45b1\0\u45ea\0\u0876\0\u0876\0\u4623"+
    "\0\u465c\0\u4695\0\u46ce\0\u4707\0\u4740\0\u4779\0\u199b\0\u199b"+
    "\0\u47b2\0\u47eb\0\u4824\0\u485d\0\u4896\0\u48cf\0\u0dce\0\u0dce"+
    "\0\u4908\0\u4941\0\u023a\0\u497a\0\u023a\0\u49b3\0\u49ec\0\u4a25"+
    "\0\u0591\0\u4a5e\0\u0591\0\u4a97\0\u4ad0\0\u4b09\0\u0876\0\u4b42"+
    "\0\u0876\0\u4b7b\0\u4bb4\0\u4bed\0\u199b\0\u4c26\0\u199b\0\u4c5f"+
    "\0\u4c98\0\u4cd1\0\u0dce\0\u4d0a\0\u0dce\0\u4d43\0\u4d7c\0\u023a"+
    "\0\u023a\0\u4db5\0\u4dee\0\u4e27\0\u0591\0\u4e60\0\u4e99\0\u4ed2"+
    "\0\u0876\0\u4f0b\0\u4f44\0\u4f7d\0\u199b\0\u4fb6\0\u4fef\0\u5028"+
    "\0\u0dce\0\u5061\0\u509a\0\u50d3\0\u510c\0\u5145\0\u517e\0\u51b7"+
    "\0\u51f0\0\u5229\0\u5262\0\u529b\0\u52d4\0\u530d\0\u5346\0\u537f"+
    "\0\u53b8\0\u53f1\0\u542a\0\u023a\0\u5463\0\u023a\0\u0591\0\u549c"+
    "\0\u0591\0\u0876\0\u54d5\0\u0876\0\u199b\0\u550e\0\u199b\0\u0dce"+
    "\0\u5547\0\u0dce\0\u023a\0\u0591\0\u0876\0\u199b\0\u0dce";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[479];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\2\10\1\11\1\12\1\7\1\13\2\7\1\14"+
    "\1\13\1\15\1\13\1\16\1\17\1\7\1\13\1\7"+
    "\3\13\1\20\1\21\1\7\1\22\1\13\1\23\1\24"+
    "\1\25\1\26\5\13\1\27\1\30\3\13\1\31\1\32"+
    "\1\13\1\33\3\13\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\7\2\10\1\11"+
    "\2\7\1\46\2\7\1\47\1\46\1\50\1\46\1\51"+
    "\1\52\1\7\1\46\1\7\3\46\1\20\1\21\1\7"+
    "\1\22\1\46\1\23\1\53\1\7\6\46\1\54\1\55"+
    "\3\46\1\56\1\57\1\46\1\60\3\46\1\61\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\62\2\0\14\62\1\63\14\62\1\64\34\62\1\7"+
    "\2\10\1\11\2\7\1\65\2\7\2\65\1\66\1\65"+
    "\1\67\1\70\1\7\1\65\1\7\3\65\1\20\1\21"+
    "\1\7\1\22\1\65\1\23\1\53\1\7\6\65\1\71"+
    "\1\72\3\65\1\73\1\74\1\65\1\75\3\65\1\76"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\77\1\100\1\101\1\102\2\77\1\103\2\77"+
    "\2\103\1\104\1\103\1\105\1\106\1\77\1\103\1\77"+
    "\3\103\1\107\3\77\1\103\3\77\6\103\1\110\1\111"+
    "\3\103\1\112\1\113\1\103\1\114\3\103\1\115\11\77"+
    "\13\116\1\117\1\116\1\120\1\121\6\116\1\122\4\116"+
    "\1\23\1\53\7\116\1\123\1\124\3\116\1\125\1\126"+
    "\1\116\1\127\3\116\1\130\1\35\10\116\72\0\2\10"+
    "\71\0\1\11\71\0\1\131\1\132\71\0\1\13\2\46"+
    "\6\13\1\0\1\13\1\46\3\13\1\0\1\133\2\0"+
    "\1\13\3\0\23\13\17\0\1\13\2\46\6\13\1\0"+
    "\1\13\1\46\3\13\1\0\1\133\2\0\1\13\3\0"+
    "\16\13\1\134\4\13\17\0\1\13\2\46\6\13\1\0"+
    "\1\13\1\46\3\13\1\0\1\133\2\0\1\13\3\0"+
    "\4\13\1\135\5\13\1\136\10\13\17\0\1\13\2\46"+
    "\6\13\1\0\1\13\1\46\3\13\1\0\1\133\2\0"+
    "\1\13\3\0\16\13\1\137\4\13\17\0\1\13\2\46"+
    "\6\13\1\0\1\13\1\46\3\13\1\0\1\133\2\0"+
    "\1\13\3\0\11\13\1\140\11\13\11\0\17\141\1\142"+
    "\5\141\1\0\43\141\26\0\1\143\70\0\1\144\50\0"+
    "\1\13\2\46\6\13\1\0\1\13\1\46\3\13\1\0"+
    "\1\133\2\0\1\13\3\0\1\13\1\145\21\13\17\0"+
    "\1\13\2\46\6\13\1\0\1\13\1\46\3\13\1\0"+
    "\1\133\2\0\1\13\3\0\11\13\1\146\11\13\17\0"+
    "\1\13\2\46\5\13\1\147\1\0\1\13\1\46\3\13"+
    "\1\0\1\133\2\0\1\150\3\0\23\13\17\0\1\13"+
    "\2\46\6\13\1\0\1\13\1\46\3\13\1\0\1\133"+
    "\2\0\1\13\3\0\4\13\1\151\16\13\17\0\1\13"+
    "\2\46\6\13\1\0\1\13\1\46\3\13\1\0\1\133"+
    "\2\0\1\13\3\0\21\13\1\152\1\13\17\0\1\13"+
    "\2\46\4\13\1\153\1\13\1\0\1\13\1\46\3\13"+
    "\1\0\1\133\2\0\1\13\3\0\23\13\17\0\1\13"+
    "\2\46\4\13\1\154\1\13\1\0\1\13\1\46\3\13"+
    "\1\0\1\133\2\0\1\13\3\0\23\13\17\0\11\46"+
    "\1\0\5\46\4\0\1\46\3\0\23\46\17\0\11\46"+
    "\1\0\5\46\4\0\1\46\3\0\16\46\1\155\4\46"+
    "\17\0\11\46\1\0\5\46\4\0\1\46\3\0\4\46"+
    "\1\156\5\46\1\157\10\46\17\0\11\46\1\0\5\46"+
    "\4\0\1\46\3\0\16\46\1\160\4\46\17\0\11\46"+
    "\1\0\5\46\4\0\1\46\3\0\11\46\1\161\11\46"+
    "\17\0\11\46\1\0\5\46\4\0\1\46\3\0\11\46"+
    "\1\162\11\46\17\0\10\46\1\163\1\0\5\46\4\0"+
    "\1\164\3\0\23\46\17\0\11\46\1\0\5\46\4\0"+
    "\1\46\3\0\4\46\1\165\16\46\17\0\11\46\1\0"+
    "\5\46\4\0\1\46\3\0\21\46\1\166\1\46\17\0"+
    "\7\46\1\167\1\46\1\0\5\46\4\0\1\46\3\0"+
    "\23\46\17\0\7\46\1\170\1\46\1\0\5\46\4\0"+
    "\1\46\3\0\23\46\11\0\1\62\2\0\14\62\1\0"+
    "\14\62\1\0\34\62\17\0\1\171\1\172\4\171\7\0"+
    "\1\171\42\0\11\65\1\0\5\65\4\0\1\65\3\0"+
    "\23\65\17\0\11\65\1\0\5\65\4\0\1\65\3\0"+
    "\4\65\1\173\5\65\1\174\10\65\17\0\11\65\1\0"+
    "\5\65\4\0\1\65\3\0\16\65\1\175\4\65\17\0"+
    "\11\65\1\0\5\65\4\0\1\65\3\0\11\65\1\176"+
    "\11\65\17\0\11\65\1\0\5\65\4\0\1\65\3\0"+
    "\11\65\1\177\11\65\17\0\10\65\1\200\1\0\5\65"+
    "\4\0\1\201\3\0\23\65\17\0\11\65\1\0\5\65"+
    "\4\0\1\65\3\0\4\65\1\202\16\65\17\0\11\65"+
    "\1\0\5\65\4\0\1\65\3\0\21\65\1\203\1\65"+
    "\17\0\7\65\1\204\1\65\1\0\5\65\4\0\1\65"+
    "\3\0\23\65\17\0\7\65\1\205\1\65\1\0\5\65"+
    "\4\0\1\65\3\0\23\65\11\0\2\171\1\206\67\171"+
    "\1\100\1\207\70\171\1\206\1\210\67\171\1\206\3\171"+
    "\11\211\1\171\5\211\4\171\1\211\3\171\23\211\13\171"+
    "\1\206\3\171\11\211\1\171\5\211\4\171\1\211\3\171"+
    "\4\211\1\212\5\211\1\213\10\211\13\171\1\206\3\171"+
    "\11\211\1\171\5\211\4\171\1\211\3\171\16\211\1\214"+
    "\4\211\13\171\1\206\3\171\11\211\1\171\5\211\4\171"+
    "\1\211\3\171\11\211\1\215\11\211\11\171\2\216\1\217"+
    "\14\216\1\220\5\216\1\171\43\216\2\171\1\206\3\171"+
    "\11\211\1\171\5\211\4\171\1\211\3\171\11\211\1\221"+
    "\11\211\13\171\1\206\3\171\10\211\1\222\1\171\5\211"+
    "\4\171\1\223\3\171\23\211\13\171\1\206\3\171\11\211"+
    "\1\171\5\211\4\171\1\211\3\171\4\211\1\224\16\211"+
    "\13\171\1\206\3\171\11\211\1\171\5\211\4\171\1\211"+
    "\3\171\21\211\1\225\1\211\13\171\1\206\3\171\7\211"+
    "\1\226\1\211\1\171\5\211\4\171\1\211\3\171\23\211"+
    "\13\171\1\206\3\171\7\211\1\227\1\211\1\171\5\211"+
    "\4\171\1\211\3\171\23\211\11\171\32\116\2\0\24\116"+
    "\1\0\42\116\2\0\5\116\1\230\5\116\1\231\10\116"+
    "\1\0\42\116\2\0\17\116\1\232\4\116\1\0\42\116"+
    "\2\0\12\116\1\233\11\116\1\0\42\116\2\141\24\116"+
    "\1\141\42\116\2\0\12\116\1\234\11\116\1\0\26\116"+
    "\1\235\12\116\1\236\2\0\24\116\1\0\42\116\2\0"+
    "\5\116\1\237\16\116\1\0\42\116\2\0\22\116\1\240"+
    "\1\116\1\0\25\116\1\241\14\116\2\0\24\116\1\0"+
    "\25\116\1\242\14\116\2\0\24\116\1\0\10\116\1\131"+
    "\1\243\1\244\66\131\5\245\1\246\63\245\5\0\1\247"+
    "\1\250\2\0\6\250\1\0\1\250\1\0\3\250\4\0"+
    "\1\250\3\0\23\250\17\0\1\13\2\46\6\13\1\0"+
    "\1\13\1\46\3\13\1\0\1\133\2\0\1\13\3\0"+
    "\21\13\1\251\1\13\17\0\1\13\2\46\6\13\1\0"+
    "\1\13\1\46\3\13\1\0\1\133\2\0\1\13\3\0"+
    "\5\13\1\252\10\13\1\253\4\13\17\0\1\13\2\46"+
    "\1\254\5\13\1\0\1\13\1\46\3\13\1\0\1\133"+
    "\2\0\1\13\3\0\23\13\17\0\1\13\2\46\3\13"+
    "\1\255\2\13\1\0\1\13\1\46\3\13\1\0\1\133"+
    "\2\0\1\13\3\0\23\13\17\0\1\13\2\46\6\13"+
    "\1\0\1\13\1\46\3\13\1\0\1\133\2\0\1\13"+
    "\3\0\4\13\1\256\16\13\36\0\1\257\62\0\1\141"+
    "\1\260\4\141\1\261\43\0\26\144\1\262\42\144\6\0"+
    "\1\13\2\46\6\13\1\0\1\13\1\46\3\13\1\0"+
    "\1\133\2\0\1\13\3\0\2\13\1\263\20\13\17\0"+
    "\1\13\2\46\1\264\5\13\1\0\1\13\1\46\3\13"+
    "\1\0\1\133\2\0\1\13\3\0\4\13\1\265\16\13"+
    "\17\0\1\13\2\46\6\13\1\0\1\13\1\46\3\13"+
    "\1\0\1\133\2\0\1\13\3\0\16\13\1\266\4\13"+
    "\17\0\1\13\2\46\6\13\1\0\1\13\1\46\3\13"+
    "\1\0\1\133\2\0\1\13\3\0\15\13\1\267\5\13"+
    "\17\0\1\13\2\46\6\13\1\0\1\13\1\46\3\13"+
    "\1\0\1\133\2\0\1\13\3\0\16\13\1\270\4\13"+
    "\17\0\1\13\2\46\6\13\1\0\1\13\1\46\3\13"+
    "\1\0\1\133\2\0\1\13\3\0\14\13\1\271\6\13"+
    "\17\0\1\13\2\46\1\272\5\13\1\0\1\13\1\46"+
    "\3\13\1\0\1\133\2\0\1\13\3\0\23\13\17\0"+
    "\11\46\1\0\5\46\4\0\1\46\3\0\21\46\1\273"+
    "\1\46\17\0\11\46\1\0\5\46\4\0\1\46\3\0"+
    "\5\46\1\274\10\46\1\275\4\46\17\0\3\46\1\276"+
    "\5\46\1\0\5\46\4\0\1\46\3\0\23\46\17\0"+
    "\6\46\1\277\2\46\1\0\5\46\4\0\1\46\3\0"+
    "\23\46\17\0\11\46\1\0\5\46\4\0\1\46\3\0"+
    "\4\46\1\300\16\46\17\0\3\46\1\301\5\46\1\0"+
    "\5\46\4\0\1\46\3\0\4\46\1\302\16\46\17\0"+
    "\11\46\1\0\5\46\4\0\1\46\3\0\16\46\1\303"+
    "\4\46\17\0\11\46\1\0\5\46\4\0\1\46\3\0"+
    "\15\46\1\304\5\46\17\0\11\46\1\0\5\46\4\0"+
    "\1\46\3\0\16\46\1\305\4\46\17\0\11\46\1\0"+
    "\5\46\4\0\1\46\3\0\14\46\1\306\6\46\17\0"+
    "\3\46\1\307\5\46\1\0\5\46\4\0\1\46\3\0"+
    "\23\46\21\0\7\310\2\0\1\310\55\0\11\65\1\0"+
    "\5\65\4\0\1\65\3\0\5\65\1\311\10\65\1\312"+
    "\4\65\17\0\3\65\1\313\5\65\1\0\5\65\4\0"+
    "\1\65\3\0\23\65\17\0\6\65\1\314\2\65\1\0"+
    "\5\65\4\0\1\65\3\0\23\65\17\0\11\65\1\0"+
    "\5\65\4\0\1\65\3\0\4\65\1\315\16\65\17\0"+
    "\3\65\1\316\5\65\1\0\5\65\4\0\1\65\3\0"+
    "\4\65\1\317\16\65\17\0\11\65\1\0\5\65\4\0"+
    "\1\65\3\0\16\65\1\320\4\65\17\0\11\65\1\0"+
    "\5\65\4\0\1\65\3\0\15\65\1\321\5\65\17\0"+
    "\11\65\1\0\5\65\4\0\1\65\3\0\16\65\1\322"+
    "\4\65\17\0\11\65\1\0\5\65\4\0\1\65\3\0"+
    "\14\65\1\323\6\65\17\0\3\65\1\324\5\65\1\0"+
    "\5\65\4\0\1\65\3\0\23\65\12\0\1\171\70\0"+
    "\1\100\1\10\74\0\11\211\1\0\5\211\4\0\1\211"+
    "\3\0\23\211\17\0\11\211\1\0\5\211\4\0\1\211"+
    "\3\0\5\211\1\325\10\211\1\326\4\211\17\0\3\211"+
    "\1\327\5\211\1\0\5\211\4\0\1\211\3\0\23\211"+
    "\17\0\6\211\1\330\2\211\1\0\5\211\4\0\1\211"+
    "\3\0\23\211\17\0\11\211\1\0\5\211\4\0\1\211"+
    "\3\0\4\211\1\331\16\211\36\0\1\171\44\0\1\171"+
    "\23\0\1\171\62\0\1\332\1\333\4\332\1\216\51\0"+
    "\3\211\1\334\5\211\1\0\5\211\4\0\1\211\3\0"+
    "\4\211\1\335\16\211\17\0\11\211\1\0\5\211\4\0"+
    "\1\211\3\0\16\211\1\336\4\211\17\0\11\211\1\0"+
    "\5\211\4\0\1\211\3\0\15\211\1\337\5\211\17\0"+
    "\11\211\1\0\5\211\4\0\1\211\3\0\16\211\1\340"+
    "\4\211\17\0\11\211\1\0\5\211\4\0\1\211\3\0"+
    "\14\211\1\341\6\211\17\0\3\211\1\342\5\211\1\0"+
    "\5\211\4\0\1\211\3\0\23\211\11\0\32\116\2\0"+
    "\6\116\1\343\10\116\1\344\4\116\1\0\21\116\1\345"+
    "\20\116\2\0\24\116\1\0\24\116\1\346\15\116\2\0"+
    "\24\116\1\0\42\116\2\0\5\116\1\347\16\116\1\0"+
    "\21\116\1\350\20\116\2\0\5\116\1\351\16\116\1\0"+
    "\42\116\2\0\17\116\1\352\4\116\1\0\42\116\2\0"+
    "\16\116\1\353\5\116\1\0\42\116\2\0\17\116\1\354"+
    "\4\116\1\0\42\116\2\0\15\116\1\355\6\116\1\0"+
    "\21\116\1\356\20\116\2\0\24\116\1\0\10\116\1\0"+
    "\1\243\67\0\5\245\1\357\67\245\1\360\1\357\63\245"+
    "\27\0\1\361\47\0\1\250\2\0\6\250\1\0\1\250"+
    "\1\0\3\250\1\0\1\133\1\361\1\0\1\250\3\0"+
    "\23\250\17\0\1\13\2\46\6\13\1\0\1\13\1\46"+
    "\3\13\1\0\1\133\2\0\1\13\3\0\5\13\1\362"+
    "\1\363\14\13\17\0\1\13\2\46\6\13\1\0\1\13"+
    "\1\46\3\13\1\0\1\133\2\0\1\13\3\0\13\13"+
    "\1\364\7\13\17\0\1\13\2\46\6\13\1\0\1\13"+
    "\1\46\3\13\1\0\1\133\2\0\1\13\3\0\11\13"+
    "\1\365\11\13\17\0\1\13\2\46\6\13\1\0\1\13"+
    "\1\46\3\13\1\0\1\133\2\0\1\13\3\0\5\13"+
    "\1\366\15\13\21\0\7\367\2\0\1\367\47\0\26\144"+
    "\1\262\3\144\1\370\36\144\6\0\1\13\2\46\6\13"+
    "\1\0\1\13\1\46\3\13\1\0\1\133\2\0\1\13"+
    "\3\0\3\13\1\371\17\13\17\0\1\13\2\46\6\13"+
    "\1\0\1\13\1\46\3\13\1\0\1\133\2\0\1\372"+
    "\3\0\23\13\17\0\1\13\2\46\3\13\1\373\2\13"+
    "\1\0\1\13\1\46\3\13\1\0\1\133\2\0\1\13"+
    "\3\0\23\13\17\0\1\13\2\46\6\13\1\0\1\13"+
    "\1\46\3\13\1\0\1\133\2\0\1\13\3\0\4\13"+
    "\1\374\16\13\17\0\1\13\2\46\4\13\1\375\1\13"+
    "\1\0\1\13\1\46\3\13\1\0\1\133\2\0\1\13"+
    "\3\0\23\13\17\0\1\13\2\46\2\13\1\376\3\13"+
    "\1\0\1\13\1\46\3\13\1\0\1\133\2\0\1\13"+
    "\3\0\23\13\17\0\1\13\2\46\6\13\1\0\1\13"+
    "\1\46\3\13\1\0\1\133\2\0\1\13\3\0\13\13"+
    "\1\377\7\13\17\0\1\13\2\46\6\13\1\0\1\13"+
    "\1\46\3\13\1\0\1\133\2\0\1\13\3\0\15\13"+
    "\1\u0100\5\13\17\0\11\46\1\0\5\46\4\0\1\46"+
    "\3\0\5\46\1\u0101\15\46\17\0\11\46\1\0\5\46"+
    "\4\0\1\46\3\0\13\46\1\u0102\7\46\17\0\11\46"+
    "\1\0\5\46\4\0\1\46\3\0\11\46\1\u0103\11\46"+
    "\17\0\11\46\1\0\5\46\4\0\1\46\3\0\5\46"+
    "\1\u0104\15\46\17\0\11\46\1\0\5\46\4\0\1\u0105"+
    "\3\0\23\46\17\0\6\46\1\u0106\2\46\1\0\5\46"+
    "\4\0\1\46\3\0\23\46\17\0\11\46\1\0\5\46"+
    "\4\0\1\46\3\0\4\46\1\u0107\16\46\17\0\7\46"+
    "\1\u0108\1\46\1\0\5\46\4\0\1\46\3\0\23\46"+
    "\17\0\5\46\1\u0109\3\46\1\0\5\46\4\0\1\46"+
    "\3\0\23\46\17\0\11\46\1\0\5\46\4\0\1\46"+
    "\3\0\13\46\1\u010a\7\46\17\0\11\46\1\0\5\46"+
    "\4\0\1\46\3\0\15\46\1\u010b\5\46\21\0\7\u010c"+
    "\2\0\1\u010c\55\0\11\65\1\0\5\65\4\0\1\65"+
    "\3\0\5\65\1\u010d\15\65\17\0\11\65\1\0\5\65"+
    "\4\0\1\65\3\0\13\65\1\u010e\7\65\17\0\11\65"+
    "\1\0\5\65\4\0\1\65\3\0\11\65\1\u010f\11\65"+
    "\17\0\11\65\1\0\5\65\4\0\1\65\3\0\5\65"+
    "\1\u0110\15\65\17\0\11\65\1\0\5\65\4\0\1\u0111"+
    "\3\0\23\65\17\0\6\65\1\u0112\2\65\1\0\5\65"+
    "\4\0\1\65\3\0\23\65\17\0\11\65\1\0\5\65"+
    "\4\0\1\65\3\0\4\65\1\u0113\16\65\17\0\7\65"+
    "\1\u0114\1\65\1\0\5\65\4\0\1\65\3\0\23\65"+
    "\17\0\5\65\1\u0115\3\65\1\0\5\65\4\0\1\65"+
    "\3\0\23\65\17\0\11\65\1\0\5\65\4\0\1\65"+
    "\3\0\13\65\1\u0116\7\65\17\0\11\65\1\0\5\65"+
    "\4\0\1\65\3\0\15\65\1\u0117\5\65\17\0\11\211"+
    "\1\0\5\211\4\0\1\211\3\0\5\211\1\u0118\15\211"+
    "\17\0\11\211\1\0\5\211\4\0\1\211\3\0\13\211"+
    "\1\u0119\7\211\17\0\11\211\1\0\5\211\4\0\1\211"+
    "\3\0\11\211\1\u011a\11\211\17\0\11\211\1\0\5\211"+
    "\4\0\1\211\3\0\5\211\1\u011b\15\211\21\0\7\u011c"+
    "\2\0\1\u011c\55\0\11\211\1\0\5\211\4\0\1\u011d"+
    "\3\0\23\211\17\0\6\211\1\u011e\2\211\1\0\5\211"+
    "\4\0\1\211\3\0\23\211\17\0\11\211\1\0\5\211"+
    "\4\0\1\211\3\0\4\211\1\u011f\16\211\17\0\7\211"+
    "\1\u0120\1\211\1\0\5\211\4\0\1\211\3\0\23\211"+
    "\17\0\5\211\1\u0121\3\211\1\0\5\211\4\0\1\211"+
    "\3\0\23\211\17\0\11\211\1\0\5\211\4\0\1\211"+
    "\3\0\13\211\1\u0122\7\211\17\0\11\211\1\0\5\211"+
    "\4\0\1\211\3\0\15\211\1\u0123\5\211\11\0\32\116"+
    "\2\0\6\116\1\u0124\15\116\1\0\42\116\2\0\14\116"+
    "\1\u0125\7\116\1\0\42\116\2\0\12\116\1\u0126\11\116"+
    "\1\0\42\116\2\0\6\116\1\u0127\15\116\1\0\41\116"+
    "\1\u0128\2\0\24\116\1\0\24\116\1\u0129\15\116\2\0"+
    "\24\116\1\0\42\116\2\0\5\116\1\u012a\16\116\1\0"+
    "\25\116\1\u012b\14\116\2\0\24\116\1\0\23\116\1\u012c"+
    "\16\116\2\0\24\116\1\0\42\116\2\0\14\116\1\u012d"+
    "\7\116\1\0\42\116\2\0\16\116\1\u012e\5\116\1\0"+
    "\10\116\4\245\1\u012f\1\357\63\245\6\0\1\13\2\46"+
    "\4\13\1\u0130\1\13\1\0\1\13\1\46\3\13\1\0"+
    "\1\133\2\0\1\13\3\0\23\13\17\0\1\13\2\46"+
    "\6\13\1\0\1\13\1\46\3\13\1\0\1\133\2\0"+
    "\1\13\3\0\7\13\1\u0131\13\13\17\0\1\13\2\46"+
    "\4\13\1\u0132\1\13\1\0\1\13\1\46\3\13\1\0"+
    "\1\133\2\0\1\13\3\0\23\13\17\0\1\13\2\46"+
    "\1\u0133\5\13\1\0\1\13\1\46\3\13\1\0\1\133"+
    "\2\0\1\13\3\0\23\13\21\0\7\u0134\2\0\1\u0134"+
    "\55\0\1\13\2\46\6\13\1\0\1\13\1\46\1\u0135"+
    "\2\13\1\0\1\133\2\0\1\13\3\0\23\13\17\0"+
    "\1\13\2\46\6\13\1\0\1\13\1\46\3\13\1\0"+
    "\1\133\2\0\1\13\3\0\5\13\1\u0136\15\13\17\0"+
    "\1\13\2\46\6\13\1\0\1\13\1\46\3\13\1\0"+
    "\1\133\2\0\1\13\3\0\20\13\1\u0137\2\13\17\0"+
    "\1\13\2\46\6\13\1\0\1\13\1\46\3\13\1\0"+
    "\1\133\2\0\1\13\3\0\11\13\1\u0138\11\13\17\0"+
    "\1\13\2\46\6\13\1\0\1\13\1\46\3\13\1\0"+
    "\1\133\2\0\1\13\3\0\16\13\1\u0139\4\13\17\0"+
    "\1\13\2\46\4\13\1\u013a\1\13\1\0\1\13\1\46"+
    "\3\13\1\0\1\133\2\0\1\13\3\0\23\13\17\0"+
    "\7\46\1\u013b\1\46\1\0\5\46\4\0\1\46\3\0"+
    "\23\46\17\0\7\46\1\u013c\1\46\1\0\5\46\4\0"+
    "\1\46\3\0\23\46\17\0\3\46\1\u013d\5\46\1\0"+
    "\5\46\4\0\1\46\3\0\23\46\17\0\11\46\1\0"+
    "\5\46\4\0\1\46\3\0\5\46\1\u013e\15\46\17\0"+
    "\11\46\1\0\5\46\4\0\1\46\3\0\20\46\1\u013f"+
    "\2\46\17\0\11\46\1\0\5\46\4\0\1\46\3\0"+
    "\11\46\1\u0140\11\46\17\0\11\46\1\0\5\46\4\0"+
    "\1\46\3\0\16\46\1\u0141\4\46\17\0\7\46\1\u0142"+
    "\1\46\1\0\5\46\4\0\1\46\3\0\23\46\21\0"+
    "\7\u0143\2\0\1\u0143\55\0\7\65\1\u0144\1\65\1\0"+
    "\5\65\4\0\1\65\3\0\23\65\17\0\7\65\1\u0145"+
    "\1\65\1\0\5\65\4\0\1\65\3\0\23\65\17\0"+
    "\3\65\1\u0146\5\65\1\0\5\65\4\0\1\65\3\0"+
    "\23\65\17\0\11\65\1\0\5\65\4\0\1\65\3\0"+
    "\5\65\1\u0147\15\65\17\0\11\65\1\0\5\65\4\0"+
    "\1\65\3\0\20\65\1\u0148\2\65\17\0\11\65\1\0"+
    "\5\65\4\0\1\65\3\0\11\65\1\u0149\11\65\17\0"+
    "\11\65\1\0\5\65\4\0\1\65\3\0\16\65\1\u014a"+
    "\4\65\17\0\7\65\1\u014b\1\65\1\0\5\65\4\0"+
    "\1\65\3\0\23\65\17\0\7\211\1\u014c\1\211\1\0"+
    "\5\211\4\0\1\211\3\0\23\211\17\0\7\211\1\u014d"+
    "\1\211\1\0\5\211\4\0\1\211\3\0\23\211\17\0"+
    "\3\211\1\u014e\5\211\1\0\5\211\4\0\1\211\3\0"+
    "\23\211\21\0\7\u014f\2\0\1\u014f\55\0\11\211\1\0"+
    "\5\211\4\0\1\211\3\0\5\211\1\u0150\15\211\17\0"+
    "\11\211\1\0\5\211\4\0\1\211\3\0\20\211\1\u0151"+
    "\2\211\17\0\11\211\1\0\5\211\4\0\1\211\3\0"+
    "\11\211\1\u0152\11\211\17\0\11\211\1\0\5\211\4\0"+
    "\1\211\3\0\16\211\1\u0153\4\211\17\0\7\211\1\u0154"+
    "\1\211\1\0\5\211\4\0\1\211\3\0\23\211\11\0"+
    "\15\116\1\u0155\14\116\2\0\24\116\1\0\25\116\1\u0156"+
    "\14\116\2\0\24\116\1\0\21\116\1\u0157\20\116\2\0"+
    "\24\116\1\0\42\116\2\0\6\116\1\u0158\15\116\1\0"+
    "\42\116\2\0\21\116\1\u0159\2\116\1\0\42\116\2\0"+
    "\12\116\1\u015a\11\116\1\0\42\116\2\0\17\116\1\u015b"+
    "\4\116\1\0\25\116\1\u015c\14\116\2\0\24\116\1\0"+
    "\10\116\6\0\1\13\2\46\6\13\1\0\1\13\1\46"+
    "\3\13\1\0\1\133\2\0\1\13\3\0\16\13\1\u015d"+
    "\4\13\17\0\1\13\2\46\6\13\1\0\1\13\1\46"+
    "\3\13\1\0\1\133\2\0\1\13\3\0\10\13\1\u015e"+
    "\12\13\17\0\1\13\2\46\6\13\1\0\1\13\1\46"+
    "\3\13\1\0\1\133\2\0\1\13\3\0\17\13\1\u015f"+
    "\3\13\17\0\1\13\2\46\2\13\1\u0160\3\13\1\0"+
    "\1\13\1\46\3\13\1\0\1\133\2\0\1\13\3\0"+
    "\23\13\21\0\7\u0161\2\0\1\u0161\55\0\1\13\2\46"+
    "\6\13\1\0\1\13\1\46\2\13\1\u0162\1\0\1\133"+
    "\2\0\1\13\3\0\23\13\17\0\1\13\2\46\1\u0163"+
    "\5\13\1\0\1\13\1\46\3\13\1\0\1\133\2\0"+
    "\1\13\3\0\23\13\17\0\1\13\2\46\2\13\1\u0164"+
    "\3\13\1\0\1\13\1\46\3\13\1\0\1\133\2\0"+
    "\1\13\3\0\23\13\17\0\1\13\2\46\4\13\1\u0165"+
    "\1\13\1\0\1\13\1\46\3\13\1\0\1\133\2\0"+
    "\1\13\3\0\23\13\17\0\1\13\2\46\6\13\1\0"+
    "\1\13\1\46\3\13\1\0\1\133\2\0\1\13\3\0"+
    "\14\13\1\u0166\6\13\17\0\1\13\2\46\3\13\1\u0167"+
    "\2\13\1\0\1\13\1\46\3\13\1\0\1\133\2\0"+
    "\1\13\3\0\23\13\17\0\11\46\1\0\5\46\4\0"+
    "\1\46\3\0\16\46\1\u0168\4\46\17\0\11\46\1\0"+
    "\5\46\4\0\1\46\3\0\17\46\1\u0169\3\46\17\0"+
    "\5\46\1\u016a\3\46\1\0\5\46\4\0\1\46\3\0"+
    "\23\46\17\0\3\46\1\u016b\5\46\1\0\5\46\4\0"+
    "\1\46\3\0\23\46\17\0\5\46\1\u016c\3\46\1\0"+
    "\5\46\4\0\1\46\3\0\23\46\17\0\7\46\1\u016d"+
    "\1\46\1\0\5\46\4\0\1\46\3\0\23\46\17\0"+
    "\11\46\1\0\5\46\4\0\1\46\3\0\14\46\1\u016e"+
    "\6\46\17\0\6\46\1\u016f\2\46\1\0\5\46\4\0"+
    "\1\46\3\0\23\46\21\0\7\171\2\0\1\171\55\0"+
    "\11\65\1\0\5\65\4\0\1\65\3\0\16\65\1\u0170"+
    "\4\65\17\0\11\65\1\0\5\65\4\0\1\65\3\0"+
    "\17\65\1\u0171\3\65\17\0\5\65\1\u0172\3\65\1\0"+
    "\5\65\4\0\1\65\3\0\23\65\17\0\3\65\1\u0173"+
    "\5\65\1\0\5\65\4\0\1\65\3\0\23\65\17\0"+
    "\5\65\1\u0174\3\65\1\0\5\65\4\0\1\65\3\0"+
    "\23\65\17\0\7\65\1\u0175\1\65\1\0\5\65\4\0"+
    "\1\65\3\0\23\65\17\0\11\65\1\0\5\65\4\0"+
    "\1\65\3\0\14\65\1\u0176\6\65\17\0\6\65\1\u0177"+
    "\2\65\1\0\5\65\4\0\1\65\3\0\23\65\17\0"+
    "\11\211\1\0\5\211\4\0\1\211\3\0\16\211\1\u0178"+
    "\4\211\17\0\11\211\1\0\5\211\4\0\1\211\3\0"+
    "\17\211\1\u0179\3\211\17\0\5\211\1\u017a\3\211\1\0"+
    "\5\211\4\0\1\211\3\0\23\211\21\0\7\u017b\2\0"+
    "\1\u017b\55\0\3\211\1\u017c\5\211\1\0\5\211\4\0"+
    "\1\211\3\0\23\211\17\0\5\211\1\u017d\3\211\1\0"+
    "\5\211\4\0\1\211\3\0\23\211\17\0\7\211\1\u017e"+
    "\1\211\1\0\5\211\4\0\1\211\3\0\23\211\17\0"+
    "\11\211\1\0\5\211\4\0\1\211\3\0\14\211\1\u017f"+
    "\6\211\17\0\6\211\1\u0180\2\211\1\0\5\211\4\0"+
    "\1\211\3\0\23\211\11\0\32\116\2\0\17\116\1\u0181"+
    "\4\116\1\0\42\116\2\0\20\116\1\u0182\3\116\1\0"+
    "\23\116\1\u0183\16\116\2\0\24\116\1\0\21\116\1\u0184"+
    "\20\116\2\0\24\116\1\0\23\116\1\u0185\16\116\2\0"+
    "\24\116\1\0\25\116\1\u0186\14\116\2\0\24\116\1\0"+
    "\42\116\2\0\15\116\1\u0187\6\116\1\0\24\116\1\u0188"+
    "\15\116\2\0\24\116\1\0\10\116\6\0\1\13\2\46"+
    "\6\13\1\0\1\13\1\46\3\13\1\0\1\133\2\0"+
    "\1\13\3\0\13\13\1\u0189\7\13\17\0\1\13\2\46"+
    "\4\13\1\u018a\1\13\1\0\1\13\1\46\3\13\1\0"+
    "\1\133\2\0\1\13\3\0\23\13\17\0\1\13\2\46"+
    "\6\13\1\0\1\13\1\46\3\13\1\0\1\133\2\0"+
    "\1\13\3\0\13\13\1\u018b\7\13\17\0\1\13\2\46"+
    "\6\13\1\0\1\13\1\46\3\13\1\0\1\133\2\0"+
    "\1\13\3\0\13\13\1\u018c\7\13\21\0\7\141\2\0"+
    "\1\141\55\0\1\13\2\46\6\13\1\0\1\13\1\46"+
    "\3\13\1\0\1\133\2\0\1\13\3\0\14\13\1\u018d"+
    "\6\13\17\0\1\13\2\46\6\13\1\0\1\13\1\46"+
    "\3\13\1\0\1\133\2\0\1\13\3\0\13\13\1\u018e"+
    "\7\13\17\0\1\13\2\46\2\13\1\u018f\3\13\1\0"+
    "\1\13\1\46\3\13\1\0\1\133\2\0\1\13\3\0"+
    "\23\13\17\0\11\46\1\0\5\46\4\0\1\46\3\0"+
    "\13\46\1\u0190\7\46\17\0\11\46\1\0\5\46\4\0"+
    "\1\46\3\0\13\46\1\u0191\7\46\17\0\11\46\1\0"+
    "\5\46\4\0\1\46\3\0\13\46\1\u0192\7\46\17\0"+
    "\11\46\1\0\5\46\4\0\1\46\3\0\14\46\1\u0193"+
    "\6\46\17\0\11\46\1\0\5\46\4\0\1\46\3\0"+
    "\13\46\1\u0194\7\46\17\0\5\46\1\u0195\3\46\1\0"+
    "\5\46\4\0\1\46\3\0\23\46\17\0\11\65\1\0"+
    "\5\65\4\0\1\65\3\0\13\65\1\u0196\7\65\17\0"+
    "\11\65\1\0\5\65\4\0\1\65\3\0\13\65\1\u0197"+
    "\7\65\17\0\11\65\1\0\5\65\4\0\1\65\3\0"+
    "\13\65\1\u0198\7\65\17\0\11\65\1\0\5\65\4\0"+
    "\1\65\3\0\14\65\1\u0199\6\65\17\0\11\65\1\0"+
    "\5\65\4\0\1\65\3\0\13\65\1\u019a\7\65\17\0"+
    "\5\65\1\u019b\3\65\1\0\5\65\4\0\1\65\3\0"+
    "\23\65\17\0\11\211\1\0\5\211\4\0\1\211\3\0"+
    "\13\211\1\u019c\7\211\17\0\11\211\1\0\5\211\4\0"+
    "\1\211\3\0\13\211\1\u019d\7\211\17\0\11\211\1\0"+
    "\5\211\4\0\1\211\3\0\13\211\1\u019e\7\211\21\0"+
    "\7\332\2\0\1\332\55\0\11\211\1\0\5\211\4\0"+
    "\1\211\3\0\14\211\1\u019f\6\211\17\0\11\211\1\0"+
    "\5\211\4\0\1\211\3\0\13\211\1\u01a0\7\211\17\0"+
    "\5\211\1\u01a1\3\211\1\0\5\211\4\0\1\211\3\0"+
    "\23\211\11\0\32\116\2\0\14\116\1\u01a2\7\116\1\0"+
    "\42\116\2\0\14\116\1\u01a3\7\116\1\0\42\116\2\0"+
    "\14\116\1\u01a4\7\116\1\0\42\116\2\0\15\116\1\u01a5"+
    "\6\116\1\0\42\116\2\0\14\116\1\u01a6\7\116\1\0"+
    "\23\116\1\u01a7\16\116\2\0\24\116\1\0\10\116\6\0"+
    "\1\13\2\46\6\13\1\0\1\13\1\46\3\13\1\0"+
    "\1\133\2\0\1\13\3\0\14\13\1\u01a8\6\13\17\0"+
    "\1\13\2\46\6\13\1\0\1\13\1\46\3\13\1\0"+
    "\1\133\2\0\1\13\3\0\11\13\1\u01a9\11\13\17\0"+
    "\1\13\2\46\4\13\1\u01aa\1\13\1\0\1\13\1\46"+
    "\3\13\1\0\1\133\2\0\1\13\3\0\23\13\17\0"+
    "\1\13\2\46\6\13\1\0\1\13\1\46\3\13\1\0"+
    "\1\133\2\0\1\13\3\0\7\13\1\u01ab\13\13\17\0"+
    "\1\13\2\46\1\u01ac\5\13\1\0\1\13\1\46\3\13"+
    "\1\0\1\133\2\0\1\13\3\0\23\13\17\0\11\46"+
    "\1\0\5\46\4\0\1\46\3\0\14\46\1\u01ad\6\46"+
    "\17\0\7\46\1\u01ae\1\46\1\0\5\46\4\0\1\46"+
    "\3\0\23\46\17\0\11\46\1\0\5\46\4\0\1\46"+
    "\3\0\7\46\1\u01af\13\46\17\0\3\46\1\u01b0\5\46"+
    "\1\0\5\46\4\0\1\46\3\0\23\46\17\0\11\65"+
    "\1\0\5\65\4\0\1\65\3\0\14\65\1\u01b1\6\65"+
    "\17\0\7\65\1\u01b2\1\65\1\0\5\65\4\0\1\65"+
    "\3\0\23\65\17\0\11\65\1\0\5\65\4\0\1\65"+
    "\3\0\7\65\1\u01b3\13\65\17\0\3\65\1\u01b4\5\65"+
    "\1\0\5\65\4\0\1\65\3\0\23\65\17\0\11\211"+
    "\1\0\5\211\4\0\1\211\3\0\14\211\1\u01b5\6\211"+
    "\17\0\7\211\1\u01b6\1\211\1\0\5\211\4\0\1\211"+
    "\3\0\23\211\17\0\11\211\1\0\5\211\4\0\1\211"+
    "\3\0\7\211\1\u01b7\13\211\17\0\3\211\1\u01b8\5\211"+
    "\1\0\5\211\4\0\1\211\3\0\23\211\11\0\32\116"+
    "\2\0\15\116\1\u01b9\6\116\1\0\25\116\1\u01ba\14\116"+
    "\2\0\24\116\1\0\42\116\2\0\10\116\1\u01bb\13\116"+
    "\1\0\21\116\1\u01bc\20\116\2\0\24\116\1\0\10\116"+
    "\6\0\1\13\2\46\6\13\1\0\1\13\1\46\3\13"+
    "\1\0\1\133\2\0\1\13\3\0\11\13\1\u01bd\11\13"+
    "\17\0\1\13\2\46\6\13\1\0\1\13\1\46\3\13"+
    "\1\0\1\133\2\0\1\13\3\0\4\13\1\u01be\16\13"+
    "\17\0\1\13\2\46\6\13\1\0\1\13\1\46\3\13"+
    "\1\0\1\133\2\0\1\13\3\0\14\13\1\u01bf\6\13"+
    "\17\0\11\46\1\0\5\46\4\0\1\46\3\0\11\46"+
    "\1\u01c0\11\46\17\0\11\46\1\0\5\46\4\0\1\46"+
    "\3\0\4\46\1\u01c1\16\46\17\0\11\46\1\0\5\46"+
    "\4\0\1\46\3\0\14\46\1\u01c2\6\46\17\0\11\65"+
    "\1\0\5\65\4\0\1\65\3\0\11\65\1\u01c3\11\65"+
    "\17\0\11\65\1\0\5\65\4\0\1\65\3\0\4\65"+
    "\1\u01c4\16\65\17\0\11\65\1\0\5\65\4\0\1\65"+
    "\3\0\14\65\1\u01c5\6\65\17\0\11\211\1\0\5\211"+
    "\4\0\1\211\3\0\11\211\1\u01c6\11\211\17\0\11\211"+
    "\1\0\5\211\4\0\1\211\3\0\4\211\1\u01c7\16\211"+
    "\17\0\11\211\1\0\5\211\4\0\1\211\3\0\14\211"+
    "\1\u01c8\6\211\11\0\32\116\2\0\12\116\1\u01c9\11\116"+
    "\1\0\42\116\2\0\5\116\1\u01ca\16\116\1\0\42\116"+
    "\2\0\15\116\1\u01cb\6\116\1\0\10\116\6\0\1\13"+
    "\2\46\6\13\1\0\1\13\1\46\3\13\1\0\1\133"+
    "\2\0\1\13\3\0\14\13\1\u01cc\6\13\17\0\1\13"+
    "\2\46\6\13\1\0\1\13\1\46\3\13\1\0\1\133"+
    "\2\0\1\13\3\0\16\13\1\u01cd\4\13\17\0\1\13"+
    "\2\46\4\13\1\u01ce\1\13\1\0\1\13\1\46\3\13"+
    "\1\0\1\133\2\0\1\13\3\0\23\13\17\0\11\46"+
    "\1\0\5\46\4\0\1\46\3\0\14\46\1\u01cf\6\46"+
    "\17\0\11\46\1\0\5\46\4\0\1\46\3\0\16\46"+
    "\1\u01d0\4\46\17\0\7\46\1\u01d1\1\46\1\0\5\46"+
    "\4\0\1\46\3\0\23\46\17\0\11\65\1\0\5\65"+
    "\4\0\1\65\3\0\14\65\1\u01d2\6\65\17\0\11\65"+
    "\1\0\5\65\4\0\1\65\3\0\16\65\1\u01d3\4\65"+
    "\17\0\7\65\1\u01d4\1\65\1\0\5\65\4\0\1\65"+
    "\3\0\23\65\17\0\11\211\1\0\5\211\4\0\1\211"+
    "\3\0\14\211\1\u01d5\6\211\17\0\11\211\1\0\5\211"+
    "\4\0\1\211\3\0\16\211\1\u01d6\4\211\17\0\7\211"+
    "\1\u01d7\1\211\1\0\5\211\4\0\1\211\3\0\23\211"+
    "\11\0\32\116\2\0\15\116\1\u01d8\6\116\1\0\42\116"+
    "\2\0\17\116\1\u01d9\4\116\1\0\25\116\1\u01da\14\116"+
    "\2\0\24\116\1\0\10\116\6\0\1\13\2\46\6\13"+
    "\1\0\1\13\1\46\3\13\1\0\1\133\2\0\1\13"+
    "\3\0\14\13\1\u01db\6\13\17\0\11\46\1\0\5\46"+
    "\4\0\1\46\3\0\14\46\1\u01dc\6\46\17\0\11\65"+
    "\1\0\5\65\4\0\1\65\3\0\14\65\1\u01dd\6\65"+
    "\17\0\11\211\1\0\5\211\4\0\1\211\3\0\14\211"+
    "\1\u01de\6\211\11\0\32\116\2\0\15\116\1\u01df\6\116"+
    "\1\0\10\116";

  private static int [] zzUnpackTrans() {
    int [] result = new int[21888];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\11\12\1\2\11\1\1\1\11\7\1\11\11"+
    "\5\1\1\11\7\1\1\0\1\11\45\1\2\0\5\1"+
    "\2\0\1\11\1\0\24\1\1\11\1\0\50\1\1\11"+
    "\1\1\4\0\6\1\1\11\1\0\1\1\1\0\25\1"+
    "\1\0\21\1\2\0\23\1\1\0\1\1\1\11\5\1"+
    "\1\0\1\11\23\1\1\0\17\1\1\0\22\1\1\11"+
    "\4\1\1\0\16\1\1\0\13\1\1\0\21\1\1\0"+
    "\31\1\1\0\144\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[479];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    StringBuffer blockComment = new StringBuffer();
    int blockCommentLevel = 0;
    int stateBeforeComment = 0;
    int stateBeforeSemAction = 0;
    int stateBeforeString = 0;
    int stateBefore = 0;
    int stateStart = 0;

    private void startComplexToken(int state) {
        stateBefore = yystate();
        int length = yylength();
        stateStart = zzStartRead;
        if (state == GLOBAL) {
            stateStart += length;
        }
        yybegin(state);
    }

    private IElementType endComplexToken(IElementType value) {
        zzStartRead = stateStart;
        yybegin(stateBefore);
        return value;
    }

    private IElementType endOfJavaCode(IElementType value) {
        if (yystate() == GLOBAL) {
            int length = yylength();
            zzStartRead = stateStart;
            yypushback(length);
            yybegin(YYINITIAL);
            return CocoTypes.JAVACODE;
        }

        yybegin(YYINITIAL);
        return value;
    }


  CocoLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  CocoLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2292) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 17: 
          { return CocoTypes.CURL_CLOSE;
          }
        case 47: break;
        case 27: 
          { return CocoTypes.ANY;
          }
        case 48: break;
        case 16: 
          { return CocoTypes.CURL_OPEN;
          }
        case 49: break;
        case 4: 
          { return CocoTypes.TERMINATOR;
          }
        case 50: break;
        case 13: 
          { yybegin(ATTRIBUTES); return CocoTypes.SMALLER_THEN;
          }
        case 51: break;
        case 32: 
          { return CocoTypes.FROM;
          }
        case 52: break;
        case 21: 
          { endComplexToken(null);
        yybegin(YYINITIAL);
        return CocoTypes.JAVACODE;
          }
        case 53: break;
        case 30: 
          { return CocoTypes.BLOCK_COMMENT;
          }
        case 54: break;
        case 2: 
          { return TokenType.WHITE_SPACE;
          }
        case 55: break;
        case 28: 
          { return endOfJavaCode(CocoTypes.TOKEN_END);
          }
        case 56: break;
        case 22: 
          { return CocoTypes.ARBITRARY_TEXT;
          }
        case 57: break;
        case 5: 
          { return CocoTypes.PIPE;
          }
        case 58: break;
        case 45: 
          { return endOfJavaCode(CocoTypes.TOKEN_IGNORECASE);
          }
        case 59: break;
        case 39: 
          { return CocoTypes.NESTED;
          }
        case 60: break;
        case 40: 
          { return endOfJavaCode(CocoTypes.TOKEN_CONTEXT);
          }
        case 61: break;
        case 11: 
          { return CocoTypes.PLUS;
          }
        case 62: break;
        case 19: 
          { return endComplexToken(CocoTypes.STRING);
          }
        case 63: break;
        case 44: 
          { return endOfJavaCode(CocoTypes.TOKEN_CHARACTERS);
          }
        case 64: break;
        case 43: 
          { yybegin(COMPILER);
        return CocoTypes.TOKEN_COMPILER;
          }
        case 65: break;
        case 24: 
          { return CocoTypes.RANGE;
          }
        case 66: break;
        case 9: 
          { yybegin(YYINITIAL); return CocoTypes.GREATER_THEN;
          }
        case 67: break;
        case 35: 
          { return CocoTypes.WEAK;
          }
        case 68: break;
        case 12: 
          { return CocoTypes.MINUS;
          }
        case 69: break;
        case 33: 
          { return CocoTypes.SEM_ACTION_;
          }
        case 70: break;
        case 42: 
          { return CocoTypes.COMMENTS;
          }
        case 71: break;
        case 3: 
          { return CocoTypes.IDENT;
          }
        case 72: break;
        case 23: 
          { return CocoTypes.LINE_COMMENT;
          }
        case 73: break;
        case 6: 
          { return CocoTypes.PAR_CLOSE;
          }
        case 74: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 75: break;
        case 14: 
          { return CocoTypes.BRACK_OPEN;
          }
        case 76: break;
        case 46: 
          { return endOfJavaCode(CocoTypes.TOKEN_PRODUCTIONS);
          }
        case 77: break;
        case 20: 
          { System.out.println("COMPILER " + yytext());
    startComplexToken(GLOBAL);
    return CocoTypes.IDENT;
          }
        case 78: break;
        case 7: 
          { return CocoTypes.PAR_OPEN;
          }
        case 79: break;
        case 15: 
          { return CocoTypes.BRACK_CLOSE;
          }
        case 80: break;
        case 31: 
          { yybegin(YYINITIAL); return CocoTypes.IMPORTPATH;
          }
        case 81: break;
        case 26: 
          { return CocoTypes.TO;
          }
        case 82: break;
        case 10: 
          { return CocoTypes.ASSIGNMENT;
          }
        case 83: break;
        case 37: 
          { return CocoTypes.IGNORE;
          }
        case 84: break;
        case 8: 
          { startComplexToken(STRING);
          }
        case 85: break;
        case 41: 
          { return endOfJavaCode(CocoTypes.TOKEN_PRAGMAS);
          }
        case 86: break;
        case 29: 
          { return CocoTypes.CHAR;
          }
        case 87: break;
        case 34: 
          { return CocoTypes.SYNC;
          }
        case 88: break;
        case 38: 
          { return endOfJavaCode(CocoTypes.TOKEN_TOKENS);
          }
        case 89: break;
        case 36: 
          { yybegin(YYINITIAL); return CocoTypes.IMPORT;
          }
        case 90: break;
        case 18: 
          { 
          }
        case 91: break;
        case 25: 
          { return CocoTypes.IF;
          }
        case 92: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                if (yystate() == GLOBAL) {
        endComplexToken(null);
        yybegin(YYINITIAL);
        return CocoTypes.JAVACODE;
    }

    return null;
              }
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
