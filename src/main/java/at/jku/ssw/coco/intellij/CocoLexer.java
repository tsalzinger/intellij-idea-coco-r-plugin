/* The following code was generated by JFlex 1.4.3 on 27/03/15 16:01 */

package at.jku.ssw.coco.intellij;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static at.jku.ssw.coco.intellij.psi.CocoTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 27/03/15 16:01 from the specification file
 * <tt>C:/private/CocoR-Plugin/src/main/java/at/jku/ssw/coco/intellij/Coco.flex</tt>
 */
public class CocoLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\12\1\13\1\12\1\12\1\12\22\0\1\12\1\0\1\14"+
    "\4\0\1\15\1\60\1\61\1\17\1\53\1\0\1\54\1\52\1\16"+
    "\1\5\11\1\2\0\1\64\1\55\1\66\2\0\1\21\1\2\1\24"+
    "\1\40\1\30\1\41\1\42\1\25\1\35\1\20\1\50\1\36\1\33"+
    "\1\22\1\32\1\34\1\20\1\26\1\31\1\27\1\47\1\20\1\51"+
    "\1\37\1\23\1\20\1\62\1\3\1\63\3\0\1\11\1\11\3\2"+
    "\1\11\2\20\1\43\3\20\1\44\1\7\1\46\1\45\1\20\1\6"+
    "\1\20\1\10\1\4\1\7\4\20\1\56\1\65\1\57\54\0\1\20"+
    "\12\0\1\20\4\0\1\20\5\0\27\20\1\0\37\20\1\0\u01ca\20"+
    "\4\0\14\20\16\0\5\20\7\0\1\20\1\0\1\20\201\0\5\20"+
    "\1\0\2\20\2\0\4\20\10\0\1\20\1\0\3\20\1\0\1\20"+
    "\1\0\24\20\1\0\123\20\1\0\213\20\10\0\236\20\11\0\46\20"+
    "\2\0\1\20\7\0\47\20\110\0\33\20\5\0\3\20\55\0\53\20"+
    "\25\0\12\1\4\0\2\20\1\0\143\20\1\0\1\20\17\0\2\20"+
    "\7\0\2\20\12\1\3\20\2\0\1\20\20\0\1\20\1\0\36\20"+
    "\35\0\131\20\13\0\1\20\16\0\12\1\41\20\11\0\2\20\4\0"+
    "\1\20\5\0\26\20\4\0\1\20\11\0\1\20\3\0\1\20\27\0"+
    "\31\20\107\0\1\20\1\0\13\20\127\0\66\20\3\0\1\20\22\0"+
    "\1\20\7\0\12\20\4\0\12\1\1\0\7\20\1\0\7\20\5\0"+
    "\10\20\2\0\2\20\2\0\26\20\1\0\7\20\1\0\1\20\3\0"+
    "\4\20\3\0\1\20\20\0\1\20\15\0\2\20\1\0\3\20\4\0"+
    "\12\1\2\20\23\0\6\20\4\0\2\20\2\0\26\20\1\0\7\20"+
    "\1\0\2\20\1\0\2\20\1\0\2\20\37\0\4\20\1\0\1\20"+
    "\7\0\12\1\2\0\3\20\20\0\11\20\1\0\3\20\1\0\26\20"+
    "\1\0\7\20\1\0\2\20\1\0\5\20\3\0\1\20\22\0\1\20"+
    "\17\0\2\20\4\0\12\1\25\0\10\20\2\0\2\20\2\0\26\20"+
    "\1\0\7\20\1\0\2\20\1\0\5\20\3\0\1\20\36\0\2\20"+
    "\1\0\3\20\4\0\12\1\1\0\1\20\21\0\1\20\1\0\6\20"+
    "\3\0\3\20\1\0\4\20\3\0\2\20\1\0\1\20\1\0\2\20"+
    "\3\0\2\20\3\0\3\20\3\0\14\20\26\0\1\20\25\0\12\1"+
    "\25\0\10\20\1\0\3\20\1\0\27\20\1\0\12\20\1\0\5\20"+
    "\3\0\1\20\32\0\2\20\6\0\2\20\4\0\12\1\25\0\10\20"+
    "\1\0\3\20\1\0\27\20\1\0\12\20\1\0\5\20\3\0\1\20"+
    "\40\0\1\20\1\0\2\20\4\0\12\1\1\0\2\20\22\0\10\20"+
    "\1\0\3\20\1\0\51\20\2\0\1\20\20\0\1\20\21\0\2\20"+
    "\4\0\12\1\12\0\6\20\5\0\22\20\3\0\30\20\1\0\11\20"+
    "\1\0\1\20\2\0\7\20\72\0\60\20\1\0\2\20\14\0\7\20"+
    "\11\0\12\1\47\0\2\20\1\0\1\20\2\0\2\20\1\0\1\20"+
    "\2\0\1\20\6\0\4\20\1\0\7\20\1\0\3\20\1\0\1\20"+
    "\1\0\1\20\2\0\2\20\1\0\4\20\1\0\2\20\11\0\1\20"+
    "\2\0\5\20\1\0\1\20\11\0\12\1\2\0\4\20\40\0\1\20"+
    "\37\0\12\1\26\0\10\20\1\0\44\20\33\0\5\20\163\0\53\20"+
    "\24\0\1\20\12\1\6\0\6\20\4\0\4\20\3\0\1\20\3\0"+
    "\2\20\7\0\3\20\4\0\15\20\14\0\1\20\1\0\12\1\6\0"+
    "\46\20\1\0\1\20\5\0\1\20\2\0\53\20\1\0\u014d\20\1\0"+
    "\4\20\2\0\7\20\1\0\1\20\1\0\4\20\2\0\51\20\1\0"+
    "\4\20\2\0\41\20\1\0\4\20\2\0\7\20\1\0\1\20\1\0"+
    "\4\20\2\0\17\20\1\0\71\20\1\0\4\20\2\0\103\20\45\0"+
    "\20\20\20\0\125\20\14\0\u026c\20\2\0\21\20\1\0\32\20\5\0"+
    "\113\20\25\0\15\20\1\0\4\20\16\0\22\20\16\0\22\20\16\0"+
    "\15\20\1\0\3\20\17\0\64\20\43\0\1\20\4\0\1\20\3\0"+
    "\12\1\46\0\12\1\6\0\130\20\10\0\51\20\1\0\1\20\5\0"+
    "\106\20\12\0\35\20\51\0\12\1\36\20\2\0\5\20\13\0\54\20"+
    "\25\0\7\20\10\0\12\1\46\0\27\20\11\0\65\20\53\0\12\1"+
    "\6\0\12\1\15\0\1\20\135\0\57\20\21\0\7\20\4\0\12\1"+
    "\51\0\36\20\15\0\2\20\12\1\54\20\32\0\44\20\34\0\12\1"+
    "\3\0\3\20\12\1\44\20\153\0\4\20\1\0\4\20\3\0\2\20"+
    "\11\0\300\20\100\0\u0116\20\2\0\6\20\2\0\46\20\2\0\6\20"+
    "\2\0\10\20\1\0\1\20\1\0\1\20\1\0\1\20\1\0\37\20"+
    "\2\0\65\20\1\0\7\20\1\0\1\20\3\0\3\20\1\0\7\20"+
    "\3\0\4\20\2\0\6\20\4\0\15\20\5\0\3\20\1\0\7\20"+
    "\164\0\1\20\15\0\1\20\20\0\15\20\145\0\1\20\4\0\1\20"+
    "\2\0\12\20\1\0\1\20\3\0\5\20\6\0\1\20\1\0\1\20"+
    "\1\0\1\20\1\0\4\20\1\0\13\20\2\0\4\20\5\0\5\20"+
    "\4\0\1\20\64\0\2\20\u0a7b\0\57\20\1\0\57\20\1\0\205\20"+
    "\6\0\4\20\3\0\2\20\14\0\46\20\1\0\1\20\5\0\1\20"+
    "\2\0\70\20\7\0\1\20\20\0\27\20\11\0\7\20\1\0\7\20"+
    "\1\0\7\20\1\0\7\20\1\0\7\20\1\0\7\20\1\0\7\20"+
    "\1\0\7\20\120\0\1\20\u01d5\0\2\20\52\0\5\20\5\0\2\20"+
    "\4\0\126\20\6\0\3\20\1\0\132\20\1\0\4\20\5\0\51\20"+
    "\3\0\136\20\21\0\33\20\65\0\20\20\u0200\0\u19b6\20\112\0\u51cd\20"+
    "\63\0\u048d\20\103\0\56\20\2\0\u010d\20\3\0\20\20\12\1\2\20"+
    "\24\0\57\20\20\0\31\20\10\0\106\20\61\0\11\20\2\0\147\20"+
    "\2\0\4\20\1\0\4\20\14\0\13\20\115\0\12\20\1\0\3\20"+
    "\1\0\4\20\1\0\27\20\35\0\64\20\16\0\62\20\34\0\12\1"+
    "\30\0\6\20\3\0\1\20\4\0\12\1\34\20\12\0\27\20\31\0"+
    "\35\20\7\0\57\20\34\0\1\20\12\1\46\0\51\20\27\0\3\20"+
    "\1\0\10\20\4\0\12\1\6\0\27\20\3\0\1\20\5\0\60\20"+
    "\1\0\1\20\3\0\2\20\2\0\5\20\2\0\1\20\1\0\1\20"+
    "\30\0\3\20\2\0\13\20\7\0\3\20\14\0\6\20\2\0\6\20"+
    "\2\0\6\20\11\0\7\20\1\0\7\20\221\0\43\20\15\0\12\1"+
    "\6\0\u2ba4\20\14\0\27\20\4\0\61\20\u2104\0\u016e\20\2\0\152\20"+
    "\46\0\7\20\14\0\5\20\5\0\1\20\1\0\12\20\1\0\15\20"+
    "\1\0\5\20\1\0\1\20\1\0\2\20\1\0\2\20\1\0\154\20"+
    "\41\0\u016b\20\22\0\100\20\2\0\66\20\50\0\14\20\164\0\5\20"+
    "\1\0\207\20\23\0\12\1\7\0\32\20\6\0\32\20\13\0\131\20"+
    "\3\0\6\20\2\0\6\20\2\0\6\20\2\0\3\20\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\3\1\14\3\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\2\0\1\22\2\0\1\23"+
    "\1\0\4\3\1\24\3\3\1\25\5\3\1\26\1\27"+
    "\1\30\1\22\1\31\1\0\1\31\1\0\1\32\5\3"+
    "\1\33\6\3\1\34\1\3\1\0\1\35\6\3\1\36"+
    "\3\3\1\37\1\3\1\40\1\0\12\3\1\0\1\41"+
    "\4\3\1\42\2\3\1\43\1\44\1\3\1\45\2\3"+
    "\1\46\3\3\1\47\1\50\5\3\1\51\1\3\1\52"+
    "\1\53";

  private static int [] zzUnpackAction() {
    int [] result = new int[133];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\u0113\0\u014a\0\u0181"+
    "\0\u01b8\0\u01ef\0\u0226\0\u025d\0\u0294\0\u02cb\0\u0302\0\u0339"+
    "\0\u0370\0\u03a7\0\u03de\0\u0415\0\u044c\0\67\0\67\0\67"+
    "\0\67\0\67\0\u0483\0\67\0\67\0\67\0\67\0\67"+
    "\0\67\0\u0113\0\u04ba\0\67\0\u04f1\0\u0528\0\u055f\0\u0596"+
    "\0\u05cd\0\u0604\0\u063b\0\u0672\0\u06a9\0\u06e0\0\u0717\0\u074e"+
    "\0\245\0\u0785\0\u07bc\0\u07f3\0\u082a\0\u0861\0\67\0\67"+
    "\0\67\0\u0113\0\67\0\u0898\0\u04f1\0\u08cf\0\245\0\u0906"+
    "\0\u093d\0\u0974\0\u09ab\0\u09e2\0\245\0\u0a19\0\u0a50\0\u0a87"+
    "\0\u0abe\0\u0af5\0\u0b2c\0\245\0\u0b63\0\u0b9a\0\67\0\u0bd1"+
    "\0\u0c08\0\u0c3f\0\u0c76\0\u0cad\0\u0ce4\0\245\0\u0d1b\0\u0d52"+
    "\0\u0d89\0\245\0\u0dc0\0\245\0\u0df7\0\u0e2e\0\u0e65\0\u0e9c"+
    "\0\u0ed3\0\u0f0a\0\u0f41\0\u0f78\0\u0faf\0\u0fe6\0\u101d\0\u1054"+
    "\0\245\0\u108b\0\u10c2\0\u10f9\0\u1130\0\245\0\u1167\0\u119e"+
    "\0\u11d5\0\245\0\u120c\0\245\0\u1243\0\u127a\0\245\0\u12b1"+
    "\0\u12e8\0\u131f\0\245\0\245\0\u1356\0\u138d\0\u13c4\0\u13fb"+
    "\0\u1432\0\245\0\u1469\0\245\0\245";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[133];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\4\1\3\4\4\2\5"+
    "\1\6\1\7\1\10\1\2\1\4\1\11\1\12\1\4"+
    "\1\13\2\4\1\14\1\15\1\16\2\4\1\17\1\20"+
    "\3\4\1\21\1\4\1\22\2\4\1\23\2\4\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\70\0\1\3\3\0"+
    "\1\3\62\0\2\4\1\0\6\4\6\0\32\4\27\0"+
    "\2\5\53\0\3\42\1\43\7\42\1\0\1\44\52\42"+
    "\3\45\1\46\11\45\1\0\51\45\16\0\1\47\1\50"+
    "\50\0\2\4\1\0\6\4\6\0\2\4\1\51\27\4"+
    "\16\0\2\4\1\0\6\4\6\0\10\4\1\52\21\4"+
    "\16\0\2\4\1\0\6\4\6\0\5\4\1\53\4\4"+
    "\1\54\17\4\16\0\2\4\1\0\6\4\6\0\12\4"+
    "\1\55\17\4\16\0\2\4\1\0\6\4\6\0\2\4"+
    "\1\56\27\4\16\0\2\4\1\0\6\4\6\0\3\4"+
    "\1\57\26\4\16\0\2\4\1\0\6\4\6\0\6\4"+
    "\1\60\23\4\16\0\2\4\1\0\6\4\6\0\21\4"+
    "\1\61\1\62\7\4\16\0\2\4\1\0\6\4\6\0"+
    "\6\4\1\63\23\4\16\0\2\4\1\0\6\4\6\0"+
    "\24\4\1\64\5\4\16\0\2\4\1\0\1\65\5\4"+
    "\6\0\32\4\16\0\2\4\1\0\6\4\6\0\10\4"+
    "\1\66\21\4\67\0\1\67\6\0\1\70\57\0\1\71"+
    "\14\0\3\42\1\43\7\42\1\0\1\72\52\42\15\0"+
    "\1\73\54\0\1\45\1\74\5\45\3\0\1\75\51\0"+
    "\13\47\1\0\53\47\17\50\1\76\47\50\1\0\2\4"+
    "\1\0\6\4\6\0\3\4\1\77\26\4\16\0\2\4"+
    "\1\0\6\4\6\0\11\4\1\100\20\4\16\0\2\4"+
    "\1\0\6\4\6\0\1\4\1\101\30\4\16\0\2\4"+
    "\1\0\6\4\6\0\2\4\1\102\10\4\1\103\16\4"+
    "\16\0\2\4\1\0\6\4\6\0\30\4\1\104\1\4"+
    "\16\0\2\4\1\0\6\4\6\0\20\4\1\105\11\4"+
    "\16\0\2\4\1\0\6\4\6\0\2\4\1\106\27\4"+
    "\16\0\2\4\1\0\6\4\6\0\1\4\1\107\10\4"+
    "\1\110\17\4\16\0\2\4\1\0\6\4\6\0\2\4"+
    "\1\111\27\4\16\0\2\4\1\0\6\4\6\0\12\4"+
    "\1\112\17\4\16\0\2\4\1\0\6\4\6\0\25\4"+
    "\1\113\4\4\16\0\2\4\1\0\4\4\1\114\1\4"+
    "\6\0\32\4\16\0\2\4\1\0\6\4\6\0\1\4"+
    "\1\115\30\4\16\0\2\116\2\0\1\116\3\0\1\116"+
    "\7\0\1\116\2\0\1\116\3\0\1\116\7\0\2\116"+
    "\25\0\16\50\1\117\1\76\47\50\1\0\2\4\1\0"+
    "\6\4\6\0\7\4\1\120\22\4\16\0\2\4\1\0"+
    "\6\4\6\0\6\4\1\121\23\4\16\0\2\4\1\0"+
    "\6\4\6\0\7\4\1\122\22\4\16\0\2\4\1\0"+
    "\6\4\6\0\13\4\1\123\1\124\15\4\16\0\2\4"+
    "\1\0\6\4\6\0\10\4\1\125\21\4\16\0\2\4"+
    "\1\0\6\4\6\0\4\4\1\126\25\4\16\0\2\4"+
    "\1\0\6\4\6\0\22\4\1\127\7\4\16\0\2\4"+
    "\1\0\6\4\6\0\20\4\1\130\11\4\16\0\2\4"+
    "\1\0\6\4\6\0\12\4\1\131\17\4\16\0\2\4"+
    "\1\0\6\4\6\0\13\4\1\132\16\4\16\0\2\4"+
    "\1\0\6\4\6\0\26\4\1\133\3\4\16\0\2\4"+
    "\1\0\6\4\6\0\30\4\1\134\1\4\16\0\2\135"+
    "\2\0\1\135\3\0\1\135\7\0\1\135\2\0\1\135"+
    "\3\0\1\135\7\0\2\135\26\0\2\4\1\0\6\4"+
    "\6\0\10\4\1\136\21\4\16\0\2\4\1\0\6\4"+
    "\6\0\1\4\1\137\30\4\16\0\2\4\1\0\6\4"+
    "\6\0\10\4\1\140\21\4\16\0\2\4\1\0\6\4"+
    "\6\0\10\4\1\141\21\4\16\0\2\4\1\0\6\4"+
    "\6\0\15\4\1\142\14\4\16\0\2\4\1\0\6\4"+
    "\6\0\2\4\1\143\27\4\16\0\2\4\1\0\6\4"+
    "\6\0\13\4\1\144\16\4\16\0\2\4\1\0\6\4"+
    "\6\0\27\4\1\145\2\4\16\0\2\4\1\0\6\4"+
    "\6\0\6\4\1\146\23\4\16\0\2\4\1\0\2\4"+
    "\1\147\3\4\6\0\32\4\16\0\2\150\2\0\1\150"+
    "\3\0\1\150\7\0\1\150\2\0\1\150\3\0\1\150"+
    "\7\0\2\150\26\0\2\4\1\0\6\4\6\0\20\4"+
    "\1\151\11\4\16\0\2\4\1\0\6\4\6\0\4\4"+
    "\1\152\25\4\16\0\2\4\1\0\6\4\6\0\17\4"+
    "\1\153\12\4\16\0\2\4\1\0\6\4\6\0\2\4"+
    "\1\154\27\4\16\0\2\4\1\0\6\4\6\0\16\4"+
    "\1\155\13\4\16\0\2\4\1\0\6\4\6\0\11\4"+
    "\1\156\20\4\16\0\2\4\1\0\6\4\6\0\1\4"+
    "\1\157\30\4\16\0\2\4\1\0\6\4\6\0\4\4"+
    "\1\160\25\4\16\0\2\4\1\0\6\4\6\0\10\4"+
    "\1\161\21\4\16\0\2\4\1\0\4\4\1\162\1\4"+
    "\6\0\32\4\16\0\2\45\2\0\1\45\3\0\1\45"+
    "\7\0\1\45\2\0\1\45\3\0\1\45\7\0\2\45"+
    "\26\0\2\4\1\0\6\4\6\0\7\4\1\163\22\4"+
    "\16\0\2\4\1\0\6\4\6\0\7\4\1\164\22\4"+
    "\16\0\2\4\1\0\6\4\6\0\7\4\1\165\22\4"+
    "\16\0\2\4\1\0\6\4\6\0\10\4\1\166\21\4"+
    "\16\0\2\4\1\0\6\4\6\0\11\4\1\167\20\4"+
    "\16\0\2\4\1\0\6\4\6\0\7\4\1\170\22\4"+
    "\16\0\2\4\1\0\6\4\6\0\4\4\1\171\25\4"+
    "\16\0\2\4\1\0\6\4\6\0\10\4\1\172\21\4"+
    "\16\0\2\4\1\0\6\4\6\0\11\4\1\173\20\4"+
    "\16\0\2\4\1\0\6\4\6\0\6\4\1\174\23\4"+
    "\16\0\2\4\1\0\6\4\6\0\15\4\1\175\14\4"+
    "\16\0\2\4\1\0\6\4\6\0\1\4\1\176\30\4"+
    "\16\0\2\4\1\0\6\4\6\0\6\4\1\177\23\4"+
    "\16\0\2\4\1\0\6\4\6\0\12\4\1\200\17\4"+
    "\16\0\2\4\1\0\6\4\6\0\11\4\1\201\20\4"+
    "\16\0\2\4\1\0\6\4\6\0\11\4\1\202\20\4"+
    "\16\0\2\4\1\0\6\4\6\0\2\4\1\203\27\4"+
    "\16\0\2\4\1\0\6\4\6\0\10\4\1\204\21\4"+
    "\16\0\2\4\1\0\6\4\6\0\11\4\1\205\20\4"+
    "\15\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5280];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\23\1\5\11\1\1\6\11\2\0\1\11"+
    "\2\0\1\1\1\0\16\1\3\11\1\1\1\11\1\0"+
    "\1\1\1\0\17\1\1\0\1\11\15\1\1\0\12\1"+
    "\1\0\35\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[133];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  public CocoLexer() {
    this((java.io.Reader)null);
  }


  public CocoLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public CocoLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1738) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 30: 
          { return KEYWORD_SYNC;
          }
        case 44: break;
        case 33: 
          { return KEYWORD_NESTED;
          }
        case 45: break;
        case 15: 
          { return SMALLER_THEN;
          }
        case 46: break;
        case 13: 
          { return BRACK_OPEN;
          }
        case 47: break;
        case 14: 
          { return BRACK_CLOSE;
          }
        case 48: break;
        case 9: 
          { return CURL_OPEN;
          }
        case 49: break;
        case 2: 
          { return NUMBER;
          }
        case 50: break;
        case 41: 
          { return KEYWORD_CHARACTERS;
          }
        case 51: break;
        case 36: 
          { return KEYWORD_IMPORT;
          }
        case 52: break;
        case 17: 
          { return GREATER_THEN;
          }
        case 53: break;
        case 27: 
          { return KEYWORD_END;
          }
        case 54: break;
        case 40: 
          { return KEYWORD_COMPILER;
          }
        case 55: break;
        case 31: 
          { return KEYWORD_FROM;
          }
        case 56: break;
        case 37: 
          { return KEYWORD_CONTEXT;
          }
        case 57: break;
        case 8: 
          { return ASSIGNMENT;
          }
        case 58: break;
        case 34: 
          { return KEYWORD_TOKENS;
          }
        case 59: break;
        case 28: 
          { return KEYWORD_OUT;
          }
        case 60: break;
        case 1: 
          { return ANY_CHAR;
          }
        case 61: break;
        case 25: 
          { return CHAR;
          }
        case 62: break;
        case 29: 
          { return BLOCK_COMMENT;
          }
        case 63: break;
        case 42: 
          { return KEYWORD_IGNORECASE;
          }
        case 64: break;
        case 38: 
          { return KEYWORD_PRAGMAS;
          }
        case 65: break;
        case 10: 
          { return CURL_CLOSE;
          }
        case 66: break;
        case 11: 
          { return PAR_OPEN;
          }
        case 67: break;
        case 24: 
          { return SEM_ACTION_START;
          }
        case 68: break;
        case 32: 
          { return KEYWORD_WEAK;
          }
        case 69: break;
        case 19: 
          { return LINE_COMMENT;
          }
        case 70: break;
        case 39: 
          { return KEYWORD_COMMENTS;
          }
        case 71: break;
        case 20: 
          { return KEYWORD_TO;
          }
        case 72: break;
        case 5: 
          { return TERMINATOR;
          }
        case 73: break;
        case 35: 
          { return KEYWORD_IGNORE;
          }
        case 74: break;
        case 22: 
          { return RANGE;
          }
        case 75: break;
        case 12: 
          { return PAR_CLOSE;
          }
        case 76: break;
        case 7: 
          { return MINUS;
          }
        case 77: break;
        case 18: 
          { return STRING;
          }
        case 78: break;
        case 16: 
          { return PIPE;
          }
        case 79: break;
        case 26: 
          { return KEYWORD_ANY;
          }
        case 80: break;
        case 4: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 81: break;
        case 3: 
          { return IDENT;
          }
        case 82: break;
        case 21: 
          { return KEYWORD_IF;
          }
        case 83: break;
        case 43: 
          { return KEYWORD_PRODUCTIONS;
          }
        case 84: break;
        case 6: 
          { return PLUS;
          }
        case 85: break;
        case 23: 
          { return SEM_ACTION_END;
          }
        case 86: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
