/* The following code was generated by JFlex 1.4.3 on 26/03/15 17:29 */

package at.jku.ssw.coco.intellij;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static at.jku.ssw.coco.intellij.psi.CocoTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 26/03/15 17:29 from the specification file
 * <tt>C:/private/CocoR-Plugin/src/main/java/at/jku/ssw/coco/intellij/CocoLexer.flex</tt>
 */
public class CocoLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\10\1\11\1\10\1\10\1\10\22\0\1\10\1\0\1\12"+
    "\4\0\1\13\1\52\1\53\1\15\1\45\1\0\1\46\1\44\1\14"+
    "\1\5\11\1\2\0\1\56\1\47\1\60\2\0\1\17\1\2\1\22"+
    "\1\36\1\26\1\37\1\40\1\23\1\33\1\16\1\42\1\34\1\31"+
    "\1\20\1\30\1\32\1\16\1\24\1\27\1\25\1\41\1\16\1\43"+
    "\1\35\1\21\1\16\1\54\1\3\1\55\3\0\1\7\1\7\3\2"+
    "\1\7\7\16\1\6\3\16\1\6\1\16\1\6\1\4\1\6\4\16"+
    "\1\50\1\57\1\51\54\0\1\16\12\0\1\16\4\0\1\16\5\0"+
    "\27\16\1\0\37\16\1\0\u01ca\16\4\0\14\16\16\0\5\16\7\0"+
    "\1\16\1\0\1\16\201\0\5\16\1\0\2\16\2\0\4\16\10\0"+
    "\1\16\1\0\3\16\1\0\1\16\1\0\24\16\1\0\123\16\1\0"+
    "\213\16\10\0\236\16\11\0\46\16\2\0\1\16\7\0\47\16\110\0"+
    "\33\16\5\0\3\16\55\0\53\16\25\0\12\1\4\0\2\16\1\0"+
    "\143\16\1\0\1\16\17\0\2\16\7\0\2\16\12\1\3\16\2\0"+
    "\1\16\20\0\1\16\1\0\36\16\35\0\131\16\13\0\1\16\16\0"+
    "\12\1\41\16\11\0\2\16\4\0\1\16\5\0\26\16\4\0\1\16"+
    "\11\0\1\16\3\0\1\16\27\0\31\16\107\0\1\16\1\0\13\16"+
    "\127\0\66\16\3\0\1\16\22\0\1\16\7\0\12\16\4\0\12\1"+
    "\1\0\7\16\1\0\7\16\5\0\10\16\2\0\2\16\2\0\26\16"+
    "\1\0\7\16\1\0\1\16\3\0\4\16\3\0\1\16\20\0\1\16"+
    "\15\0\2\16\1\0\3\16\4\0\12\1\2\16\23\0\6\16\4\0"+
    "\2\16\2\0\26\16\1\0\7\16\1\0\2\16\1\0\2\16\1\0"+
    "\2\16\37\0\4\16\1\0\1\16\7\0\12\1\2\0\3\16\20\0"+
    "\11\16\1\0\3\16\1\0\26\16\1\0\7\16\1\0\2\16\1\0"+
    "\5\16\3\0\1\16\22\0\1\16\17\0\2\16\4\0\12\1\25\0"+
    "\10\16\2\0\2\16\2\0\26\16\1\0\7\16\1\0\2\16\1\0"+
    "\5\16\3\0\1\16\36\0\2\16\1\0\3\16\4\0\12\1\1\0"+
    "\1\16\21\0\1\16\1\0\6\16\3\0\3\16\1\0\4\16\3\0"+
    "\2\16\1\0\1\16\1\0\2\16\3\0\2\16\3\0\3\16\3\0"+
    "\14\16\26\0\1\16\25\0\12\1\25\0\10\16\1\0\3\16\1\0"+
    "\27\16\1\0\12\16\1\0\5\16\3\0\1\16\32\0\2\16\6\0"+
    "\2\16\4\0\12\1\25\0\10\16\1\0\3\16\1\0\27\16\1\0"+
    "\12\16\1\0\5\16\3\0\1\16\40\0\1\16\1\0\2\16\4\0"+
    "\12\1\1\0\2\16\22\0\10\16\1\0\3\16\1\0\51\16\2\0"+
    "\1\16\20\0\1\16\21\0\2\16\4\0\12\1\12\0\6\16\5\0"+
    "\22\16\3\0\30\16\1\0\11\16\1\0\1\16\2\0\7\16\72\0"+
    "\60\16\1\0\2\16\14\0\7\16\11\0\12\1\47\0\2\16\1\0"+
    "\1\16\2\0\2\16\1\0\1\16\2\0\1\16\6\0\4\16\1\0"+
    "\7\16\1\0\3\16\1\0\1\16\1\0\1\16\2\0\2\16\1\0"+
    "\4\16\1\0\2\16\11\0\1\16\2\0\5\16\1\0\1\16\11\0"+
    "\12\1\2\0\4\16\40\0\1\16\37\0\12\1\26\0\10\16\1\0"+
    "\44\16\33\0\5\16\163\0\53\16\24\0\1\16\12\1\6\0\6\16"+
    "\4\0\4\16\3\0\1\16\3\0\2\16\7\0\3\16\4\0\15\16"+
    "\14\0\1\16\1\0\12\1\6\0\46\16\1\0\1\16\5\0\1\16"+
    "\2\0\53\16\1\0\u014d\16\1\0\4\16\2\0\7\16\1\0\1\16"+
    "\1\0\4\16\2\0\51\16\1\0\4\16\2\0\41\16\1\0\4\16"+
    "\2\0\7\16\1\0\1\16\1\0\4\16\2\0\17\16\1\0\71\16"+
    "\1\0\4\16\2\0\103\16\45\0\20\16\20\0\125\16\14\0\u026c\16"+
    "\2\0\21\16\1\0\32\16\5\0\113\16\25\0\15\16\1\0\4\16"+
    "\16\0\22\16\16\0\22\16\16\0\15\16\1\0\3\16\17\0\64\16"+
    "\43\0\1\16\4\0\1\16\3\0\12\1\46\0\12\1\6\0\130\16"+
    "\10\0\51\16\1\0\1\16\5\0\106\16\12\0\35\16\51\0\12\1"+
    "\36\16\2\0\5\16\13\0\54\16\25\0\7\16\10\0\12\1\46\0"+
    "\27\16\11\0\65\16\53\0\12\1\6\0\12\1\15\0\1\16\135\0"+
    "\57\16\21\0\7\16\4\0\12\1\51\0\36\16\15\0\2\16\12\1"+
    "\54\16\32\0\44\16\34\0\12\1\3\0\3\16\12\1\44\16\153\0"+
    "\4\16\1\0\4\16\3\0\2\16\11\0\300\16\100\0\u0116\16\2\0"+
    "\6\16\2\0\46\16\2\0\6\16\2\0\10\16\1\0\1\16\1\0"+
    "\1\16\1\0\1\16\1\0\37\16\2\0\65\16\1\0\7\16\1\0"+
    "\1\16\3\0\3\16\1\0\7\16\3\0\4\16\2\0\6\16\4\0"+
    "\15\16\5\0\3\16\1\0\7\16\164\0\1\16\15\0\1\16\20\0"+
    "\15\16\145\0\1\16\4\0\1\16\2\0\12\16\1\0\1\16\3\0"+
    "\5\16\6\0\1\16\1\0\1\16\1\0\1\16\1\0\4\16\1\0"+
    "\13\16\2\0\4\16\5\0\5\16\4\0\1\16\64\0\2\16\u0a7b\0"+
    "\57\16\1\0\57\16\1\0\205\16\6\0\4\16\3\0\2\16\14\0"+
    "\46\16\1\0\1\16\5\0\1\16\2\0\70\16\7\0\1\16\20\0"+
    "\27\16\11\0\7\16\1\0\7\16\1\0\7\16\1\0\7\16\1\0"+
    "\7\16\1\0\7\16\1\0\7\16\1\0\7\16\120\0\1\16\u01d5\0"+
    "\2\16\52\0\5\16\5\0\2\16\4\0\126\16\6\0\3\16\1\0"+
    "\132\16\1\0\4\16\5\0\51\16\3\0\136\16\21\0\33\16\65\0"+
    "\20\16\u0200\0\u19b6\16\112\0\u51cd\16\63\0\u048d\16\103\0\56\16\2\0"+
    "\u010d\16\3\0\20\16\12\1\2\16\24\0\57\16\20\0\31\16\10\0"+
    "\106\16\61\0\11\16\2\0\147\16\2\0\4\16\1\0\4\16\14\0"+
    "\13\16\115\0\12\16\1\0\3\16\1\0\4\16\1\0\27\16\35\0"+
    "\64\16\16\0\62\16\34\0\12\1\30\0\6\16\3\0\1\16\4\0"+
    "\12\1\34\16\12\0\27\16\31\0\35\16\7\0\57\16\34\0\1\16"+
    "\12\1\46\0\51\16\27\0\3\16\1\0\10\16\4\0\12\1\6\0"+
    "\27\16\3\0\1\16\5\0\60\16\1\0\1\16\3\0\2\16\2\0"+
    "\5\16\2\0\1\16\1\0\1\16\30\0\3\16\2\0\13\16\7\0"+
    "\3\16\14\0\6\16\2\0\6\16\2\0\6\16\11\0\7\16\1\0"+
    "\7\16\221\0\43\16\15\0\12\1\6\0\u2ba4\16\14\0\27\16\4\0"+
    "\61\16\u2104\0\u016e\16\2\0\152\16\46\0\7\16\14\0\5\16\5\0"+
    "\1\16\1\0\12\16\1\0\15\16\1\0\5\16\1\0\1\16\1\0"+
    "\2\16\1\0\2\16\1\0\154\16\41\0\u016b\16\22\0\100\16\2\0"+
    "\66\16\50\0\14\16\164\0\5\16\1\0\207\16\23\0\12\1\7\0"+
    "\32\16\6\0\32\16\13\0\131\16\3\0\6\16\2\0\6\16\2\0"+
    "\6\16\2\0\3\16\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\3\1\11\3\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\2\0\1\22\2\0\1\23"+
    "\1\0\4\3\1\24\2\3\1\25\3\3\1\26\1\27"+
    "\1\30\1\22\1\31\1\0\1\31\1\0\1\32\5\3"+
    "\1\33\5\3\1\0\1\34\11\3\1\35\1\36\1\0"+
    "\11\3\1\0\1\37\4\3\1\40\2\3\1\41\1\3"+
    "\1\42\2\3\1\43\3\3\1\44\1\45\5\3\1\46"+
    "\1\3\1\47\1\50";

  private static int [] zzUnpackAction() {
    int [] result = new int[120];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\365\0\u0126\0\u0157"+
    "\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d\0\u02ae\0\u02df"+
    "\0\u0310\0\u0341\0\61\0\61\0\61\0\61\0\61\0\u0372"+
    "\0\61\0\61\0\61\0\61\0\61\0\61\0\365\0\u03a3"+
    "\0\61\0\u03d4\0\u0405\0\u0436\0\u0467\0\u0498\0\u04c9\0\u04fa"+
    "\0\u052b\0\u055c\0\u058d\0\u05be\0\223\0\u05ef\0\u0620\0\u0651"+
    "\0\61\0\61\0\61\0\365\0\61\0\u0682\0\u03d4\0\u06b3"+
    "\0\223\0\u06e4\0\u0715\0\u0746\0\u0777\0\u07a8\0\223\0\u07d9"+
    "\0\u080a\0\u083b\0\u086c\0\u089d\0\u08ce\0\61\0\u08ff\0\u0930"+
    "\0\u0961\0\u0992\0\u09c3\0\u09f4\0\u0a25\0\u0a56\0\u0a87\0\223"+
    "\0\223\0\u0ab8\0\u0ae9\0\u0b1a\0\u0b4b\0\u0b7c\0\u0bad\0\u0bde"+
    "\0\u0c0f\0\u0c40\0\u0c71\0\u0ca2\0\223\0\u0cd3\0\u0d04\0\u0d35"+
    "\0\u0d66\0\223\0\u0d97\0\u0dc8\0\u0df9\0\u0e2a\0\223\0\u0e5b"+
    "\0\u0e8c\0\223\0\u0ebd\0\u0eee\0\u0f1f\0\223\0\223\0\u0f50"+
    "\0\u0f81\0\u0fb2\0\u0fe3\0\u1014\0\223\0\u1045\0\223\0\223";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[120];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\4\1\3\2\4\2\5"+
    "\1\6\1\7\1\10\1\2\1\4\1\11\1\12\1\4"+
    "\1\13\2\4\1\14\1\15\3\4\1\16\1\17\3\4"+
    "\1\20\3\4\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\62\0\1\3\3\0\1\3\54\0\2\4\1\0\4\4"+
    "\6\0\26\4\25\0\2\5\47\0\3\37\1\40\5\37"+
    "\1\0\1\41\46\37\3\42\1\43\7\42\1\0\45\42"+
    "\14\0\1\44\1\45\44\0\2\4\1\0\4\4\6\0"+
    "\2\4\1\46\23\4\16\0\2\4\1\0\4\4\6\0"+
    "\10\4\1\47\15\4\16\0\2\4\1\0\4\4\6\0"+
    "\5\4\1\50\4\4\1\51\13\4\16\0\2\4\1\0"+
    "\4\4\6\0\12\4\1\52\13\4\16\0\2\4\1\0"+
    "\4\4\6\0\2\4\1\53\23\4\16\0\2\4\1\0"+
    "\4\4\6\0\6\4\1\54\17\4\16\0\2\4\1\0"+
    "\4\4\6\0\21\4\1\55\1\56\3\4\16\0\2\4"+
    "\1\0\4\4\6\0\6\4\1\57\17\4\16\0\2\4"+
    "\1\0\4\4\6\0\10\4\1\60\15\4\61\0\1\61"+
    "\6\0\1\62\51\0\1\63\14\0\3\37\1\40\5\37"+
    "\1\0\1\64\46\37\13\0\1\65\50\0\1\42\1\66"+
    "\3\42\3\0\1\67\45\0\11\44\1\0\47\44\15\45"+
    "\1\70\43\45\1\0\2\4\1\0\4\4\6\0\3\4"+
    "\1\71\22\4\16\0\2\4\1\0\4\4\6\0\11\4"+
    "\1\72\14\4\16\0\2\4\1\0\4\4\6\0\1\4"+
    "\1\73\24\4\16\0\2\4\1\0\4\4\6\0\2\4"+
    "\1\74\10\4\1\75\12\4\16\0\2\4\1\0\4\4"+
    "\6\0\24\4\1\76\1\4\16\0\2\4\1\0\4\4"+
    "\6\0\20\4\1\77\5\4\16\0\2\4\1\0\4\4"+
    "\6\0\1\4\1\100\10\4\1\101\13\4\16\0\2\4"+
    "\1\0\4\4\6\0\2\4\1\102\23\4\16\0\2\4"+
    "\1\0\4\4\6\0\12\4\1\103\13\4\16\0\2\4"+
    "\1\0\4\4\6\0\1\4\1\104\24\4\16\0\2\105"+
    "\2\0\1\105\1\0\1\105\7\0\1\105\2\0\1\105"+
    "\3\0\1\105\7\0\2\105\21\0\14\45\1\106\1\70"+
    "\43\45\1\0\2\4\1\0\4\4\6\0\7\4\1\107"+
    "\16\4\16\0\2\4\1\0\4\4\6\0\6\4\1\110"+
    "\17\4\16\0\2\4\1\0\4\4\6\0\7\4\1\111"+
    "\16\4\16\0\2\4\1\0\4\4\6\0\13\4\1\112"+
    "\1\113\11\4\16\0\2\4\1\0\4\4\6\0\10\4"+
    "\1\114\15\4\16\0\2\4\1\0\4\4\6\0\22\4"+
    "\1\115\3\4\16\0\2\4\1\0\4\4\6\0\20\4"+
    "\1\116\5\4\16\0\2\4\1\0\4\4\6\0\12\4"+
    "\1\117\13\4\16\0\2\4\1\0\4\4\6\0\13\4"+
    "\1\120\12\4\16\0\2\4\1\0\4\4\6\0\24\4"+
    "\1\121\1\4\16\0\2\122\2\0\1\122\1\0\1\122"+
    "\7\0\1\122\2\0\1\122\3\0\1\122\7\0\2\122"+
    "\22\0\2\4\1\0\4\4\6\0\10\4\1\123\15\4"+
    "\16\0\2\4\1\0\4\4\6\0\1\4\1\124\24\4"+
    "\16\0\2\4\1\0\4\4\6\0\10\4\1\125\15\4"+
    "\16\0\2\4\1\0\4\4\6\0\10\4\1\126\15\4"+
    "\16\0\2\4\1\0\4\4\6\0\15\4\1\127\10\4"+
    "\16\0\2\4\1\0\4\4\6\0\2\4\1\130\23\4"+
    "\16\0\2\4\1\0\4\4\6\0\13\4\1\131\12\4"+
    "\16\0\2\4\1\0\4\4\6\0\23\4\1\132\2\4"+
    "\16\0\2\4\1\0\4\4\6\0\6\4\1\133\17\4"+
    "\16\0\2\134\2\0\1\134\1\0\1\134\7\0\1\134"+
    "\2\0\1\134\3\0\1\134\7\0\2\134\22\0\2\4"+
    "\1\0\4\4\6\0\20\4\1\135\5\4\16\0\2\4"+
    "\1\0\4\4\6\0\4\4\1\136\21\4\16\0\2\4"+
    "\1\0\4\4\6\0\17\4\1\137\6\4\16\0\2\4"+
    "\1\0\4\4\6\0\2\4\1\140\23\4\16\0\2\4"+
    "\1\0\4\4\6\0\16\4\1\141\7\4\16\0\2\4"+
    "\1\0\4\4\6\0\11\4\1\142\14\4\16\0\2\4"+
    "\1\0\4\4\6\0\1\4\1\143\24\4\16\0\2\4"+
    "\1\0\4\4\6\0\4\4\1\144\21\4\16\0\2\4"+
    "\1\0\4\4\6\0\10\4\1\145\15\4\16\0\2\42"+
    "\2\0\1\42\1\0\1\42\7\0\1\42\2\0\1\42"+
    "\3\0\1\42\7\0\2\42\22\0\2\4\1\0\4\4"+
    "\6\0\7\4\1\146\16\4\16\0\2\4\1\0\4\4"+
    "\6\0\7\4\1\147\16\4\16\0\2\4\1\0\4\4"+
    "\6\0\7\4\1\150\16\4\16\0\2\4\1\0\4\4"+
    "\6\0\10\4\1\151\15\4\16\0\2\4\1\0\4\4"+
    "\6\0\11\4\1\152\14\4\16\0\2\4\1\0\4\4"+
    "\6\0\7\4\1\153\16\4\16\0\2\4\1\0\4\4"+
    "\6\0\4\4\1\154\21\4\16\0\2\4\1\0\4\4"+
    "\6\0\10\4\1\155\15\4\16\0\2\4\1\0\4\4"+
    "\6\0\11\4\1\156\14\4\16\0\2\4\1\0\4\4"+
    "\6\0\6\4\1\157\17\4\16\0\2\4\1\0\4\4"+
    "\6\0\15\4\1\160\10\4\16\0\2\4\1\0\4\4"+
    "\6\0\1\4\1\161\24\4\16\0\2\4\1\0\4\4"+
    "\6\0\6\4\1\162\17\4\16\0\2\4\1\0\4\4"+
    "\6\0\12\4\1\163\13\4\16\0\2\4\1\0\4\4"+
    "\6\0\11\4\1\164\14\4\16\0\2\4\1\0\4\4"+
    "\6\0\11\4\1\165\14\4\16\0\2\4\1\0\4\4"+
    "\6\0\2\4\1\166\23\4\16\0\2\4\1\0\4\4"+
    "\6\0\10\4\1\167\15\4\16\0\2\4\1\0\4\4"+
    "\6\0\11\4\1\170\14\4\15\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4214];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\20\1\5\11\1\1\6\11\2\0\1\11"+
    "\2\0\1\1\1\0\13\1\3\11\1\1\1\11\1\0"+
    "\1\1\1\0\14\1\1\0\1\11\13\1\1\0\11\1"+
    "\1\0\34\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[120];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  public CocoLexer() {
    this((java.io.Reader)null);
  }


  public CocoLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public CocoLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1728) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 31: 
          { return KEYWORD_NESTED;
          }
        case 41: break;
        case 15: 
          { return SMALLER_THEN;
          }
        case 42: break;
        case 13: 
          { return BRACK_OPEN;
          }
        case 43: break;
        case 14: 
          { return BRACK_CLOSE;
          }
        case 44: break;
        case 9: 
          { return CURL_OPEN;
          }
        case 45: break;
        case 2: 
          { return NUMBER;
          }
        case 46: break;
        case 38: 
          { return KEYWORD_CHARACTERS;
          }
        case 47: break;
        case 17: 
          { return GREATER_THEN;
          }
        case 48: break;
        case 27: 
          { return KEYWORD_END;
          }
        case 49: break;
        case 37: 
          { return KEYWORD_COMPILER;
          }
        case 50: break;
        case 29: 
          { return KEYWORD_FROM;
          }
        case 51: break;
        case 8: 
          { return ASSIGNMENT;
          }
        case 52: break;
        case 32: 
          { return KEYWORD_TOKENS;
          }
        case 53: break;
        case 34: 
          { return KEYWORD_CONTEXT;
          }
        case 54: break;
        case 1: 
          { return ANY_CHAR;
          }
        case 55: break;
        case 25: 
          { return CHAR;
          }
        case 56: break;
        case 28: 
          { return BLOCK_COMMENT;
          }
        case 57: break;
        case 39: 
          { return KEYWORD_IGNORECASE;
          }
        case 58: break;
        case 35: 
          { return KEYWORD_PRAGMAS;
          }
        case 59: break;
        case 10: 
          { return CURL_CLOSE;
          }
        case 60: break;
        case 11: 
          { return PAR_OPEN;
          }
        case 61: break;
        case 24: 
          { return SEM_ACTION_START;
          }
        case 62: break;
        case 30: 
          { return KEYWORD_WEAK;
          }
        case 63: break;
        case 19: 
          { return LINE_COMMENT;
          }
        case 64: break;
        case 36: 
          { return KEYWORD_COMMENTS;
          }
        case 65: break;
        case 20: 
          { return KEYWORD_TO;
          }
        case 66: break;
        case 5: 
          { return TERMINATOR;
          }
        case 67: break;
        case 33: 
          { return KEYWORD_IGNORE;
          }
        case 68: break;
        case 22: 
          { return RANGE;
          }
        case 69: break;
        case 12: 
          { return PAR_CLOSE;
          }
        case 70: break;
        case 7: 
          { return MINUS;
          }
        case 71: break;
        case 18: 
          { return STRING;
          }
        case 72: break;
        case 16: 
          { return PIPE;
          }
        case 73: break;
        case 26: 
          { return KEYWORD_ANY;
          }
        case 74: break;
        case 4: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 75: break;
        case 3: 
          { return IDENT;
          }
        case 76: break;
        case 21: 
          { return KEYWORD_IF;
          }
        case 77: break;
        case 40: 
          { return KEYWORD_PRODUCTIONS;
          }
        case 78: break;
        case 6: 
          { return PLUS;
          }
        case 79: break;
        case 23: 
          { return SEM_ACTION_END;
          }
        case 80: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
