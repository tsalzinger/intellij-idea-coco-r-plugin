/* The following code was generated by JFlex 1.4.3 on 23/03/15 09:44 */

package at.jku.ssw.coco.intellij;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import at.jku.ssw.coco.intellij.psi.CocoTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 23/03/15 09:44 from the specification file
 * <tt>C:/private/CocoR-Plugin/src/at/jku/ssw/coco/intellij/Coco.flex</tt>
 */
class CocoLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int PARSER = 22;
  public static final int IMPORT_STATE = 4;
  public static final int CHARACTERS = 12;
  public static final int COMPILER = 6;
  public static final int ATTRIBUTES = 26;
  public static final int WHITESPACEDECL = 20;
  public static final int TOKENS = 14;
  public static final int SEM_ACTION = 24;
  public static final int YYINITIAL = 0;
  public static final int BLOCK_COMMENT = 2;
  public static final int GLOBAL = 8;
  public static final int COMMENTDECL = 18;
  public static final int PRAGMAS = 16;
  public static final int SCANNER = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  2,  2,  5,  5, 
     6,  6,  7,  7,  2,  2,  8,  8,  2,  2,  9, 9
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\5\1\2\1\1\1\0\1\2\1\1\16\5\4\0\1\2\1\0"+
    "\1\6\1\0\1\4\2\0\1\7\1\33\1\32\1\26\1\61\1\0"+
    "\1\62\1\25\1\3\1\22\11\10\1\0\1\27\1\63\1\60\1\57"+
    "\2\0\1\11\1\12\1\13\1\14\1\15\1\16\1\31\1\46\1\43"+
    "\1\4\1\51\1\44\1\41\1\52\1\40\1\42\1\4\1\45\1\50"+
    "\1\47\1\54\1\4\1\56\1\53\1\55\1\4\1\64\1\17\1\65"+
    "\1\0\1\4\1\0\1\23\1\23\3\4\1\23\2\4\1\34\3\4"+
    "\1\35\1\23\1\37\1\36\1\4\1\21\1\4\1\24\1\20\1\23"+
    "\4\4\1\66\1\30\1\67\1\0\41\5\2\0\4\4\4\0\1\4"+
    "\2\0\1\5\7\0\1\4\4\0\1\4\5\0\27\4\1\0\37\4"+
    "\1\0\u01ca\4\4\0\14\4\16\0\5\4\7\0\1\4\1\0\1\4"+
    "\21\0\160\5\5\4\1\0\2\4\2\0\4\4\10\0\1\4\1\0"+
    "\3\4\1\0\1\4\1\0\24\4\1\0\123\4\1\0\213\4\1\0"+
    "\5\5\2\0\236\4\11\0\46\4\2\0\1\4\7\0\47\4\7\0"+
    "\1\4\1\0\55\5\1\0\1\5\1\0\2\5\1\0\2\5\1\0"+
    "\1\5\10\0\33\4\5\0\3\4\15\0\5\5\6\0\1\4\4\0"+
    "\13\5\5\0\53\4\25\5\12\10\4\0\2\4\1\5\143\4\1\0"+
    "\1\4\10\5\1\0\6\5\2\4\2\5\1\0\4\5\2\4\12\10"+
    "\3\4\2\0\1\4\17\0\1\5\1\4\1\5\36\4\33\5\2\0"+
    "\131\4\13\5\1\4\16\0\12\10\41\4\11\5\2\4\4\0\1\4"+
    "\5\0\26\4\4\5\1\4\11\5\1\4\3\5\1\4\5\5\22\0"+
    "\31\4\3\5\104\0\1\4\1\0\13\4\67\0\33\5\1\0\4\5"+
    "\66\4\3\5\1\4\22\5\1\4\7\5\12\4\2\5\2\0\12\10"+
    "\1\0\7\4\1\0\7\4\1\0\3\5\1\0\10\4\2\0\2\4"+
    "\2\0\26\4\1\0\7\4\1\0\1\4\3\0\4\4\2\0\1\5"+
    "\1\4\7\5\2\0\2\5\2\0\3\5\1\4\10\0\1\5\4\0"+
    "\2\4\1\0\3\4\2\5\2\0\12\10\4\4\7\0\1\4\5\0"+
    "\3\5\1\0\6\4\4\0\2\4\2\0\26\4\1\0\7\4\1\0"+
    "\2\4\1\0\2\4\1\0\2\4\2\0\1\5\1\0\5\5\4\0"+
    "\2\5\2\0\3\5\3\0\1\5\7\0\4\4\1\0\1\4\7\0"+
    "\12\10\2\5\3\4\1\5\13\0\3\5\1\0\11\4\1\0\3\4"+
    "\1\0\26\4\1\0\7\4\1\0\2\4\1\0\5\4\2\0\1\5"+
    "\1\4\10\5\1\0\3\5\1\0\3\5\2\0\1\4\17\0\2\4"+
    "\2\5\2\0\12\10\1\0\1\4\17\0\3\5\1\0\10\4\2\0"+
    "\2\4\2\0\26\4\1\0\7\4\1\0\2\4\1\0\5\4\2\0"+
    "\1\5\1\4\7\5\2\0\2\5\2\0\3\5\10\0\2\5\4\0"+
    "\2\4\1\0\3\4\2\5\2\0\12\10\1\0\1\4\20\0\1\5"+
    "\1\4\1\0\6\4\3\0\3\4\1\0\4\4\3\0\2\4\1\0"+
    "\1\4\1\0\2\4\3\0\2\4\3\0\3\4\3\0\14\4\4\0"+
    "\5\5\3\0\3\5\1\0\4\5\2\0\1\4\6\0\1\5\16\0"+
    "\12\10\11\0\1\4\7\0\3\5\1\0\10\4\1\0\3\4\1\0"+
    "\27\4\1\0\12\4\1\0\5\4\3\0\1\4\7\5\1\0\3\5"+
    "\1\0\4\5\7\0\2\5\1\0\2\4\6\0\2\4\2\5\2\0"+
    "\12\10\22\0\2\5\1\0\10\4\1\0\3\4\1\0\27\4\1\0"+
    "\12\4\1\0\5\4\2\0\1\5\1\4\7\5\1\0\3\5\1\0"+
    "\4\5\7\0\2\5\7\0\1\4\1\0\2\4\2\5\2\0\12\10"+
    "\1\0\2\4\17\0\2\5\1\0\10\4\1\0\3\4\1\0\51\4"+
    "\2\0\1\4\7\5\1\0\3\5\1\0\4\5\1\4\10\0\1\5"+
    "\10\0\2\4\2\5\2\0\12\10\12\0\6\4\2\0\2\5\1\0"+
    "\22\4\3\0\30\4\1\0\11\4\1\0\1\4\2\0\7\4\3\0"+
    "\1\5\4\0\6\5\1\0\1\5\1\0\10\5\22\0\2\5\15\0"+
    "\60\4\1\5\2\4\7\5\4\0\10\4\10\5\1\0\12\10\47\0"+
    "\2\4\1\0\1\4\2\0\2\4\1\0\1\4\2\0\1\4\6\0"+
    "\4\4\1\0\7\4\1\0\3\4\1\0\1\4\1\0\1\4\2\0"+
    "\2\4\1\0\4\4\1\5\2\4\6\5\1\0\2\5\1\4\2\0"+
    "\5\4\1\0\1\4\1\0\6\5\2\0\12\10\2\0\4\4\40\0"+
    "\1\4\27\0\2\5\6\0\12\10\13\0\1\5\1\0\1\5\1\0"+
    "\1\5\4\0\2\5\10\4\1\0\44\4\4\0\24\5\1\0\2\5"+
    "\5\4\13\5\1\0\44\5\11\0\1\5\71\0\53\4\24\5\1\4"+
    "\12\10\6\0\6\4\4\5\4\4\3\5\1\4\3\5\2\4\7\5"+
    "\3\4\4\5\15\4\14\5\1\4\1\5\12\10\4\5\2\0\46\4"+
    "\1\0\1\4\5\0\1\4\2\0\53\4\1\0\u014d\4\1\0\4\4"+
    "\2\0\7\4\1\0\1\4\1\0\4\4\2\0\51\4\1\0\4\4"+
    "\2\0\41\4\1\0\4\4\2\0\7\4\1\0\1\4\1\0\4\4"+
    "\2\0\17\4\1\0\71\4\1\0\4\4\2\0\103\4\2\0\3\5"+
    "\40\0\20\4\20\0\125\4\14\0\u026c\4\2\0\21\4\1\0\32\4"+
    "\5\0\113\4\3\0\3\4\17\0\15\4\1\0\4\4\3\5\13\0"+
    "\22\4\3\5\13\0\22\4\2\5\14\0\15\4\1\0\3\4\1\0"+
    "\2\5\14\0\64\4\40\5\3\0\1\4\3\0\2\4\1\5\2\0"+
    "\12\10\41\0\3\5\2\0\12\10\6\0\130\4\10\0\51\4\1\5"+
    "\1\4\5\0\106\4\12\0\35\4\3\0\14\5\4\0\14\5\12\0"+
    "\12\10\36\4\2\0\5\4\13\0\54\4\4\0\21\5\7\4\2\5"+
    "\6\0\12\10\46\0\27\4\5\5\4\0\65\4\12\5\1\0\35\5"+
    "\2\0\1\5\12\10\6\0\12\10\15\0\1\4\130\0\5\5\57\4"+
    "\21\5\7\4\4\0\12\10\21\0\11\5\14\0\3\5\36\4\15\5"+
    "\2\4\12\10\54\4\16\5\14\0\44\4\24\5\10\0\12\10\3\0"+
    "\3\4\12\10\44\4\122\0\3\5\1\0\25\5\4\4\1\5\4\4"+
    "\3\5\2\4\11\0\300\4\47\5\25\0\4\5\u0116\4\2\0\6\4"+
    "\2\0\46\4\2\0\6\4\2\0\10\4\1\0\1\4\1\0\1\4"+
    "\1\0\1\4\1\0\37\4\2\0\65\4\1\0\7\4\1\0\1\4"+
    "\3\0\3\4\1\0\7\4\3\0\4\4\2\0\6\4\4\0\15\4"+
    "\5\0\3\4\1\0\7\4\16\0\5\5\32\0\5\5\20\0\2\4"+
    "\23\0\1\4\13\0\5\5\5\0\6\5\1\0\1\4\15\0\1\4"+
    "\20\0\15\4\3\0\33\4\25\0\15\5\4\0\1\5\3\0\14\5"+
    "\21\0\1\4\4\0\1\4\2\0\12\4\1\0\1\4\3\0\5\4"+
    "\6\0\1\4\1\0\1\4\1\0\1\4\1\0\4\4\1\0\13\4"+
    "\2\0\4\4\5\0\5\4\4\0\1\4\21\0\51\4\u0a77\0\57\4"+
    "\1\0\57\4\1\0\205\4\6\0\4\4\3\5\2\4\14\0\46\4"+
    "\1\0\1\4\5\0\1\4\2\0\70\4\7\0\1\4\17\0\1\5"+
    "\27\4\11\0\7\4\1\0\7\4\1\0\7\4\1\0\7\4\1\0"+
    "\7\4\1\0\7\4\1\0\7\4\1\0\7\4\1\0\40\5\57\0"+
    "\1\4\u01d5\0\3\4\31\0\11\4\6\5\1\0\5\4\2\0\5\4"+
    "\4\0\126\4\2\0\2\5\2\0\3\4\1\0\132\4\1\0\4\4"+
    "\5\0\51\4\3\0\136\4\21\0\33\4\65\0\20\4\u0200\0\u19b6\4"+
    "\112\0\u51cd\4\63\0\u048d\4\103\0\56\4\2\0\u010d\4\3\0\20\4"+
    "\12\10\2\4\24\0\57\4\1\5\4\0\12\5\1\0\31\4\7\0"+
    "\1\5\120\4\2\5\45\0\11\4\2\0\147\4\2\0\4\4\1\0"+
    "\4\4\14\0\13\4\115\0\12\4\1\5\3\4\1\5\4\4\1\5"+
    "\27\4\5\5\20\0\1\4\7\0\64\4\14\0\2\5\62\4\21\5"+
    "\13\0\12\10\6\0\22\5\6\4\3\0\1\4\4\0\12\10\34\4"+
    "\10\5\2\0\27\4\15\5\14\0\35\4\3\0\4\5\57\4\16\5"+
    "\16\0\1\4\12\10\46\0\51\4\16\5\11\0\3\4\1\5\10\4"+
    "\2\5\2\0\12\10\6\0\27\4\3\0\1\4\1\5\4\0\60\4"+
    "\1\5\1\4\3\5\2\4\2\5\5\4\2\5\1\4\1\5\1\4"+
    "\30\0\3\4\2\0\13\4\5\5\2\0\3\4\2\5\12\0\6\4"+
    "\2\0\6\4\2\0\6\4\11\0\7\4\1\0\7\4\221\0\43\4"+
    "\10\5\1\0\2\5\2\0\12\10\6\0\u2ba4\4\14\0\27\4\4\0"+
    "\61\4\u2104\0\u016e\4\2\0\152\4\46\0\7\4\14\0\5\4\5\0"+
    "\1\4\1\5\12\4\1\0\15\4\1\0\5\4\1\0\1\4\1\0"+
    "\2\4\1\0\2\4\1\0\154\4\41\0\u016b\4\22\0\100\4\2\0"+
    "\66\4\50\0\15\4\3\0\20\5\20\0\7\5\14\0\2\4\30\0"+
    "\3\4\31\0\1\4\6\0\5\4\1\0\207\4\2\0\1\5\4\0"+
    "\1\4\13\0\12\10\7\0\32\4\4\0\1\4\1\0\32\4\13\0"+
    "\131\4\3\0\6\4\2\0\6\4\2\0\6\4\2\0\3\4\3\0"+
    "\2\4\3\0\2\4\22\0\3\5\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\5\0\1\2\1\3\1\4\1\2\1\5"+
    "\2\2\3\5\1\6\1\7\1\10\1\11\4\5\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\3\23\1\2\1\3\7\5\6\24\5\1\1\5\1\1"+
    "\1\5\1\11\6\5\11\25\1\26\1\27\2\0\1\30"+
    "\2\0\4\5\1\31\4\5\1\32\7\5\6\24\1\26"+
    "\1\27\1\1\2\5\1\0\1\5\1\33\1\5\1\34"+
    "\2\5\1\26\1\27\6\25\2\0\1\35\1\0\1\36"+
    "\3\5\1\37\5\5\1\36\3\5\1\37\4\5\3\24"+
    "\1\37\4\24\1\1\2\5\1\0\4\5\3\25\1\37"+
    "\4\25\1\40\1\0\17\5\7\24\1\1\2\5\1\41"+
    "\1\42\1\5\1\43\7\25\1\0\17\5\7\24\1\1"+
    "\3\5\7\25\1\0\3\5\1\44\3\5\1\45\6\5"+
    "\1\45\6\24\1\45\1\1\1\5\1\46\1\47\6\25"+
    "\1\45\1\5\1\50\1\5\1\51\3\5\1\50\1\5"+
    "\1\51\2\5\1\24\1\50\1\24\1\51\2\24\1\5"+
    "\1\25\1\50\1\25\1\51\2\25\1\52\3\5\1\52"+
    "\3\5\1\52\3\24\1\53\1\52\3\25\6\5\3\24"+
    "\3\25\1\54\1\5\1\55\1\54\1\5\1\55\1\54"+
    "\1\24\1\55\1\54\1\25\1\55\4\56";

  private static int [] zzUnpackAction() {
    int [] result = new int[352];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\u0118\0\u0150\0\u0188"+
    "\0\u01c0\0\u01f8\0\u0230\0\u0268\0\u02a0\0\u02d8\0\u0310\0\u0348"+
    "\0\u0380\0\u03b8\0\u03f0\0\u0428\0\u0460\0\u0230\0\u0230\0\u0230"+
    "\0\u0498\0\u04d0\0\u0508\0\u0540\0\u0230\0\u0230\0\u0230\0\u0230"+
    "\0\u0230\0\u0230\0\u0230\0\u0230\0\u0230\0\u0578\0\u05b0\0\u05e8"+
    "\0\u0620\0\u0658\0\u0690\0\u06c8\0\u0700\0\u0738\0\u0770\0\u07a8"+
    "\0\u07e0\0\u0818\0\u0850\0\u0888\0\u08c0\0\u08f8\0\u0930\0\u0968"+
    "\0\u09a0\0\u09d8\0\u0a10\0\u0a48\0\u0a80\0\u0ab8\0\u0af0\0\u0b28"+
    "\0\u0b60\0\u0b98\0\u0bd0\0\u0c08\0\u0c40\0\u0c78\0\u0cb0\0\u0ce8"+
    "\0\u0d20\0\u0d58\0\u0d90\0\u0dc8\0\u0e00\0\u0e38\0\u0e70\0\u0ea8"+
    "\0\u0230\0\u0ee0\0\u0348\0\u0230\0\u0f18\0\u0f50\0\u0f88\0\u0fc0"+
    "\0\u0ff8\0\u1030\0\u0230\0\u1068\0\u10a0\0\u10d8\0\u1110\0\u0230"+
    "\0\u1148\0\u1180\0\u11b8\0\u11f0\0\u1228\0\u1260\0\u1298\0\u12d0"+
    "\0\u1308\0\u1340\0\u1378\0\u13b0\0\u13e8\0\u1420\0\u0968\0\u1458"+
    "\0\u1490\0\u14c8\0\u1500\0\u1538\0\u1298\0\u1570\0\u0690\0\u15a8"+
    "\0\u15e0\0\u1618\0\u0cb0\0\u1650\0\u1688\0\u16c0\0\u16f8\0\u1730"+
    "\0\u1768\0\u17a0\0\u17d8\0\u0230\0\u1810\0\u0310\0\u1848\0\u1880"+
    "\0\u18b8\0\u0310\0\u18f0\0\u1928\0\u1960\0\u1998\0\u19d0\0\u0690"+
    "\0\u1a08\0\u1a40\0\u1a78\0\u0690\0\u1ab0\0\u1ae8\0\u1b20\0\u1b58"+
    "\0\u1b90\0\u1bc8\0\u1c00\0\u0818\0\u1c38\0\u1c70\0\u1ca8\0\u1ce0"+
    "\0\u1d18\0\u1d50\0\u1d88\0\u1dc0\0\u1df8\0\u1e30\0\u1e68\0\u1ea0"+
    "\0\u1ed8\0\u1f10\0\u1f48\0\u0cb0\0\u1f80\0\u1fb8\0\u1ff0\0\u2028"+
    "\0\u0230\0\u2060\0\u2098\0\u20d0\0\u2108\0\u2140\0\u2178\0\u21b0"+
    "\0\u21e8\0\u2220\0\u2258\0\u2290\0\u22c8\0\u2300\0\u2338\0\u2370"+
    "\0\u23a8\0\u23e0\0\u2418\0\u2450\0\u2488\0\u24c0\0\u24f8\0\u2530"+
    "\0\u2568\0\u25a0\0\u25d8\0\u0230\0\u0690\0\u2610\0\u0690\0\u2648"+
    "\0\u2680\0\u26b8\0\u26f0\0\u2728\0\u2760\0\u2798\0\u27d0\0\u2808"+
    "\0\u2840\0\u2878\0\u28b0\0\u28e8\0\u2920\0\u2958\0\u2990\0\u29c8"+
    "\0\u2a00\0\u2a38\0\u2a70\0\u2aa8\0\u2ae0\0\u2b18\0\u2b50\0\u2b88"+
    "\0\u2bc0\0\u2bf8\0\u2c30\0\u2c68\0\u2ca0\0\u2cd8\0\u2d10\0\u2d48"+
    "\0\u2d80\0\u2db8\0\u2df0\0\u2e28\0\u2e60\0\u2e98\0\u2ed0\0\u2f08"+
    "\0\u2f40\0\u2f78\0\u2fb0\0\u2fe8\0\u0310\0\u3020\0\u3058\0\u3090"+
    "\0\u0310\0\u30c8\0\u3100\0\u3138\0\u3170\0\u31a8\0\u31e0\0\u0690"+
    "\0\u3218\0\u3250\0\u3288\0\u32c0\0\u32f8\0\u3330\0\u0818\0\u3368"+
    "\0\u33a0\0\u31e0\0\u0690\0\u33d8\0\u3410\0\u3448\0\u3480\0\u34b8"+
    "\0\u34f0\0\u0cb0\0\u3528\0\u0310\0\u3560\0\u0310\0\u3598\0\u35d0"+
    "\0\u3608\0\u0690\0\u3640\0\u0690\0\u3678\0\u36b0\0\u36e8\0\u0818"+
    "\0\u3720\0\u0818\0\u3758\0\u3790\0\u37c8\0\u3800\0\u0cb0\0\u3838"+
    "\0\u0cb0\0\u3870\0\u38a8\0\u0310\0\u38e0\0\u3918\0\u3950\0\u0690"+
    "\0\u3988\0\u39c0\0\u39f8\0\u0818\0\u3a30\0\u3a68\0\u3aa0\0\u0690"+
    "\0\u0cb0\0\u3ad8\0\u3b10\0\u3b48\0\u3b80\0\u3bb8\0\u3bf0\0\u3c28"+
    "\0\u3c60\0\u3c98\0\u3cd0\0\u3d08\0\u3d40\0\u3d78\0\u3db0\0\u3de8"+
    "\0\u0310\0\u3e20\0\u0310\0\u0690\0\u3e58\0\u0690\0\u0818\0\u3e90"+
    "\0\u0818\0\u0cb0\0\u3ec8\0\u0cb0\0\u0310\0\u0690\0\u0818\0\u0cb0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[352];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\13\1\14\1\15\1\16\1\17\1\13\1\20\1\21"+
    "\1\13\1\22\1\17\1\23\1\17\1\24\1\17\1\13"+
    "\2\17\1\13\2\17\1\25\2\13\1\26\1\17\1\27"+
    "\1\30\1\31\5\17\1\32\1\33\3\17\1\34\7\17"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\3\46\1\16\2\46\1\47\1\50\16\46\1\51"+
    "\1\46\1\26\1\46\1\27\1\30\34\46\1\13\1\14"+
    "\1\52\1\16\1\53\1\13\1\20\1\21\1\13\1\54"+
    "\1\53\1\55\1\53\1\56\1\53\1\13\2\53\1\13"+
    "\2\53\1\25\2\13\1\26\1\53\1\27\1\30\6\53"+
    "\1\57\1\60\3\53\1\61\7\53\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\13\1\14"+
    "\1\52\1\16\1\62\1\13\1\20\1\21\1\13\2\62"+
    "\1\63\1\62\1\64\1\62\1\13\2\62\1\13\2\62"+
    "\1\25\2\13\1\26\1\62\1\27\1\30\6\62\1\65"+
    "\1\66\3\62\1\67\7\62\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\3\70\1\71\1\72"+
    "\1\70\1\73\1\74\1\70\1\54\1\72\1\75\1\72"+
    "\1\56\1\72\1\70\2\72\1\70\2\72\3\70\1\26"+
    "\1\53\1\27\1\30\4\72\1\53\1\72\1\76\1\77"+
    "\1\72\2\53\1\61\3\53\4\72\11\70\1\13\1\14"+
    "\1\52\1\16\1\53\1\13\1\20\1\21\1\13\1\54"+
    "\1\53\1\75\1\53\1\56\1\53\1\13\2\53\1\13"+
    "\2\53\1\25\2\13\1\26\1\53\1\27\1\30\6\53"+
    "\1\57\1\77\3\53\1\61\7\53\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\13\1\14"+
    "\1\52\1\16\1\53\1\13\1\20\1\21\1\13\1\54"+
    "\1\53\1\75\1\53\1\56\1\53\1\13\2\53\1\13"+
    "\2\53\1\25\2\13\1\26\1\53\1\27\1\100\6\53"+
    "\1\57\1\77\3\53\1\61\7\53\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\13\1\14"+
    "\1\52\1\16\1\53\1\13\1\20\1\21\1\13\1\54"+
    "\1\53\1\75\1\53\1\56\1\101\1\13\2\53\1\13"+
    "\2\53\1\25\2\13\1\26\1\53\1\27\1\30\6\53"+
    "\1\57\1\77\3\53\1\102\2\53\1\103\4\53\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\13\1\14\1\52\1\16\1\53\1\13\1\20\1\21"+
    "\1\13\1\54\1\53\1\55\1\53\1\56\1\53\1\13"+
    "\2\53\1\13\2\53\1\25\2\13\1\26\1\53\1\27"+
    "\1\100\6\53\1\57\1\104\3\53\1\61\1\105\5\53"+
    "\1\106\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\3\107\1\110\2\107\1\111\1\112\3\107"+
    "\1\113\1\107\1\114\14\107\1\27\1\30\6\107\1\115"+
    "\1\116\3\107\1\117\7\107\1\35\10\107\71\0\1\14"+
    "\70\0\1\15\70\0\1\120\22\0\1\121\45\0\1\17"+
    "\1\53\2\0\1\53\6\17\1\0\2\17\1\53\2\17"+
    "\1\122\3\0\1\17\2\0\23\17\11\0\6\123\1\124"+
    "\61\123\7\125\1\0\7\125\1\126\50\125\4\0\1\17"+
    "\1\53\2\0\1\53\6\17\1\0\2\17\1\53\2\17"+
    "\1\122\3\0\1\17\2\0\16\17\1\127\4\17\15\0"+
    "\1\17\1\53\2\0\1\53\6\17\1\0\2\17\1\53"+
    "\2\17\1\122\3\0\1\17\2\0\4\17\1\130\5\17"+
    "\1\131\10\17\15\0\1\17\1\53\2\0\1\53\6\17"+
    "\1\0\2\17\1\53\2\17\1\122\3\0\1\17\2\0"+
    "\16\17\1\132\4\17\36\0\1\133\46\0\1\17\1\53"+
    "\2\0\1\53\6\17\1\0\2\17\1\53\2\17\1\122"+
    "\3\0\1\17\2\0\1\17\1\134\21\17\15\0\1\17"+
    "\1\53\2\0\1\53\6\17\1\0\2\17\1\53\2\17"+
    "\1\122\3\0\1\17\2\0\11\17\1\135\11\17\15\0"+
    "\1\17\1\53\2\0\1\53\6\17\1\0\2\17\1\53"+
    "\2\17\1\122\3\0\1\136\2\0\23\17\15\0\1\17"+
    "\1\53\2\0\1\53\6\17\1\0\2\17\1\53\2\17"+
    "\1\122\3\0\1\17\2\0\4\17\1\137\16\17\11\0"+
    "\3\46\1\0\22\46\1\0\1\46\1\0\1\46\2\0"+
    "\34\46\3\47\1\123\2\47\1\46\17\47\1\123\1\47"+
    "\1\123\1\47\2\123\34\47\3\46\1\125\22\46\1\125"+
    "\1\46\1\125\1\46\2\125\34\46\3\0\1\140\66\0"+
    "\1\52\71\0\2\53\2\0\7\53\1\0\5\53\4\0"+
    "\1\53\2\0\23\53\15\0\2\53\2\0\7\53\1\0"+
    "\5\53\4\0\1\53\2\0\16\53\1\141\4\53\15\0"+
    "\2\53\2\0\7\53\1\0\5\53\4\0\1\53\2\0"+
    "\4\53\1\142\5\53\1\143\10\53\15\0\2\53\2\0"+
    "\7\53\1\0\5\53\4\0\1\53\2\0\16\53\1\144"+
    "\4\53\15\0\2\53\2\0\7\53\1\0\5\53\4\0"+
    "\1\53\2\0\11\53\1\145\11\53\15\0\2\53\2\0"+
    "\7\53\1\0\5\53\4\0\1\146\2\0\23\53\15\0"+
    "\2\53\2\0\7\53\1\0\5\53\4\0\1\53\2\0"+
    "\4\53\1\147\16\53\15\0\2\62\2\0\7\62\1\0"+
    "\5\62\4\0\1\62\2\0\23\62\15\0\2\62\2\0"+
    "\7\62\1\0\5\62\4\0\1\62\2\0\4\62\1\150"+
    "\5\62\1\151\10\62\15\0\2\62\2\0\7\62\1\0"+
    "\5\62\4\0\1\62\2\0\16\62\1\152\4\62\15\0"+
    "\2\62\2\0\7\62\1\0\5\62\4\0\1\62\2\0"+
    "\11\62\1\153\11\62\15\0\2\62\2\0\7\62\1\0"+
    "\5\62\4\0\1\154\2\0\23\62\15\0\2\62\2\0"+
    "\7\62\1\0\5\62\4\0\1\62\2\0\4\62\1\155"+
    "\16\62\11\0\11\70\1\0\1\70\1\0\1\70\1\0"+
    "\12\70\4\0\4\70\1\0\2\70\1\0\1\70\6\0"+
    "\20\70\1\156\5\70\1\0\1\70\1\0\1\70\1\0"+
    "\10\70\1\157\1\70\4\0\4\70\1\0\2\70\1\0"+
    "\1\70\6\0\21\70\2\72\2\70\1\72\1\53\1\72"+
    "\1\53\1\72\1\53\1\72\1\70\5\72\3\70\1\0"+
    "\1\53\2\0\4\72\1\53\2\72\1\53\1\72\6\53"+
    "\4\72\11\70\6\73\1\70\2\73\1\123\1\73\1\123"+
    "\1\73\1\123\12\73\4\123\4\73\1\123\2\73\1\123"+
    "\1\73\6\123\15\73\11\70\1\125\1\70\1\125\1\70"+
    "\1\125\1\70\1\160\10\70\4\125\4\70\1\125\2\70"+
    "\1\125\1\70\6\125\15\70\4\0\2\53\2\0\7\53"+
    "\1\0\5\53\4\0\1\53\2\0\4\53\1\161\5\53"+
    "\1\143\10\53\11\0\4\70\2\72\2\70\1\72\1\53"+
    "\1\72\1\53\1\72\1\53\1\72\1\70\5\72\3\70"+
    "\1\0\1\53\2\0\4\72\1\53\2\72\1\53\1\72"+
    "\1\145\5\53\4\72\11\70\4\0\2\53\2\0\7\53"+
    "\1\0\5\53\4\0\1\162\2\0\23\53\36\0\1\163"+
    "\46\0\2\53\2\0\7\53\1\0\5\53\4\0\1\53"+
    "\2\0\11\53\1\164\11\53\15\0\2\53\2\0\7\53"+
    "\1\0\5\53\4\0\1\53\2\0\4\53\1\165\16\53"+
    "\15\0\2\53\2\0\5\53\1\166\1\53\1\0\5\53"+
    "\4\0\1\53\2\0\23\53\15\0\2\53\2\0\6\53"+
    "\1\167\1\0\5\53\4\0\1\146\2\0\23\53\15\0"+
    "\2\53\2\0\7\53\1\0\5\53\4\0\1\53\2\0"+
    "\21\53\1\170\1\53\15\0\2\53\2\0\5\53\1\171"+
    "\1\53\1\0\5\53\4\0\1\53\2\0\23\53\11\0"+
    "\32\107\2\0\23\107\1\0\13\107\1\172\22\107\1\173"+
    "\3\107\2\0\23\107\1\0\10\107\6\111\1\107\23\111"+
    "\2\123\23\111\1\123\10\111\32\107\2\125\23\107\1\125"+
    "\42\107\2\0\4\107\1\174\5\107\1\175\10\107\1\0"+
    "\42\107\2\0\16\107\1\176\4\107\1\0\42\107\2\0"+
    "\11\107\1\177\11\107\1\0\41\107\1\200\2\0\23\107"+
    "\1\0\42\107\2\0\4\107\1\201\16\107\1\0\10\107"+
    "\1\120\1\0\66\120\4\0\1\202\4\0\6\202\1\0"+
    "\2\202\1\0\2\202\1\0\1\203\2\0\1\202\2\0"+
    "\23\202\20\0\1\204\66\0\1\125\1\204\7\0\1\125"+
    "\1\205\4\125\47\0\1\17\1\53\2\0\1\53\6\17"+
    "\1\0\2\17\1\53\2\17\1\122\3\0\1\17\2\0"+
    "\21\17\1\206\1\17\15\0\1\17\1\53\2\0\1\53"+
    "\6\17\1\0\2\17\1\53\2\17\1\122\3\0\1\17"+
    "\2\0\5\17\1\207\10\17\1\210\4\17\15\0\1\17"+
    "\1\53\2\0\1\53\1\211\5\17\1\0\2\17\1\53"+
    "\2\17\1\122\3\0\1\17\2\0\23\17\15\0\1\17"+
    "\1\53\2\0\1\53\3\17\1\212\2\17\1\0\2\17"+
    "\1\53\2\17\1\122\3\0\1\17\2\0\23\17\15\0"+
    "\1\17\1\53\2\0\1\53\6\17\1\0\2\17\1\53"+
    "\2\17\1\122\3\0\1\17\2\0\2\17\1\213\20\17"+
    "\15\0\1\17\1\53\2\0\1\53\1\214\5\17\1\0"+
    "\2\17\1\53\2\17\1\122\3\0\1\17\2\0\4\17"+
    "\1\215\16\17\15\0\1\17\1\53\2\0\1\53\6\17"+
    "\1\0\2\17\1\53\2\17\1\122\3\0\1\17\2\0"+
    "\16\17\1\216\4\17\15\0\1\17\1\53\2\0\1\53"+
    "\6\17\1\0\2\17\1\53\2\17\1\122\3\0\1\17"+
    "\2\0\15\17\1\217\5\17\15\0\2\53\2\0\7\53"+
    "\1\0\5\53\4\0\1\53\2\0\21\53\1\220\1\53"+
    "\15\0\2\53\2\0\7\53\1\0\5\53\4\0\1\53"+
    "\2\0\5\53\1\221\10\53\1\222\4\53\15\0\2\53"+
    "\2\0\1\53\1\223\5\53\1\0\5\53\4\0\1\53"+
    "\2\0\23\53\15\0\2\53\2\0\4\53\1\224\2\53"+
    "\1\0\5\53\4\0\1\53\2\0\23\53\15\0\2\53"+
    "\2\0\1\53\1\225\5\53\1\0\5\53\4\0\1\53"+
    "\2\0\4\53\1\226\16\53\15\0\2\53\2\0\7\53"+
    "\1\0\5\53\4\0\1\53\2\0\16\53\1\227\4\53"+
    "\15\0\2\53\2\0\7\53\1\0\5\53\4\0\1\53"+
    "\2\0\15\53\1\230\5\53\15\0\2\62\2\0\7\62"+
    "\1\0\5\62\4\0\1\62\2\0\5\62\1\231\10\62"+
    "\1\232\4\62\15\0\2\62\2\0\1\62\1\233\5\62"+
    "\1\0\5\62\4\0\1\62\2\0\23\62\15\0\2\62"+
    "\2\0\4\62\1\234\2\62\1\0\5\62\4\0\1\62"+
    "\2\0\23\62\15\0\2\62\2\0\1\62\1\235\5\62"+
    "\1\0\5\62\4\0\1\62\2\0\4\62\1\236\16\62"+
    "\15\0\2\62\2\0\7\62\1\0\5\62\4\0\1\62"+
    "\2\0\16\62\1\237\4\62\15\0\2\62\2\0\7\62"+
    "\1\0\5\62\4\0\1\62\2\0\15\62\1\240\5\62"+
    "\11\0\1\156\1\70\7\156\1\120\1\156\1\120\1\156"+
    "\1\120\12\156\4\120\4\156\1\120\2\156\1\120\1\156"+
    "\6\120\15\156\11\70\1\0\1\70\1\0\1\70\1\0"+
    "\2\70\1\241\7\70\4\0\4\70\1\0\2\70\1\0"+
    "\1\70\6\0\15\70\4\0\2\53\2\0\7\53\1\0"+
    "\5\53\4\0\1\53\2\0\5\53\1\242\10\53\1\222"+
    "\4\53\15\0\2\53\2\0\7\53\1\0\5\53\4\0"+
    "\1\53\2\0\16\53\1\243\4\53\11\0\25\163\1\244"+
    "\42\163\4\0\2\53\2\0\7\53\1\0\5\53\4\0"+
    "\1\53\2\0\4\53\1\245\16\53\15\0\2\53\2\0"+
    "\7\53\1\0\5\53\4\0\1\53\2\0\14\53\1\246"+
    "\6\53\15\0\2\53\2\0\7\53\1\0\5\53\4\0"+
    "\1\53\2\0\16\53\1\247\4\53\15\0\2\53\2\0"+
    "\1\53\1\250\5\53\1\0\5\53\4\0\1\53\2\0"+
    "\23\53\11\0\1\172\1\107\30\172\2\120\23\172\1\120"+
    "\10\172\32\107\2\0\5\107\1\251\10\107\1\252\4\107"+
    "\1\0\21\107\1\253\20\107\2\0\23\107\1\0\24\107"+
    "\1\254\15\107\2\0\23\107\1\0\21\107\1\255\20\107"+
    "\2\0\4\107\1\256\16\107\1\0\42\107\2\0\16\107"+
    "\1\257\4\107\1\0\42\107\2\0\15\107\1\260\5\107"+
    "\1\0\10\107\4\0\1\202\4\0\6\202\1\0\2\202"+
    "\1\0\2\202\1\122\1\0\1\261\1\0\1\202\2\0"+
    "\23\202\40\0\1\261\50\0\7\262\3\0\1\262\51\0"+
    "\1\17\1\53\2\0\1\53\6\17\1\0\2\17\1\53"+
    "\2\17\1\122\3\0\1\17\2\0\6\17\1\263\14\17"+
    "\15\0\1\17\1\53\2\0\1\53\6\17\1\0\2\17"+
    "\1\53\2\17\1\122\3\0\1\17\2\0\13\17\1\264"+
    "\7\17\15\0\1\17\1\53\2\0\1\53\6\17\1\0"+
    "\2\17\1\53\2\17\1\122\3\0\1\17\2\0\11\17"+
    "\1\265\11\17\15\0\1\17\1\53\2\0\1\53\6\17"+
    "\1\0\2\17\1\53\2\17\1\122\3\0\1\17\2\0"+
    "\3\17\1\266\17\17\15\0\1\17\1\53\2\0\1\53"+
    "\6\17\1\0\2\17\1\53\2\17\1\122\3\0\1\267"+
    "\2\0\23\17\15\0\1\17\1\53\2\0\1\53\3\17"+
    "\1\270\2\17\1\0\2\17\1\53\2\17\1\122\3\0"+
    "\1\17\2\0\23\17\15\0\1\17\1\53\2\0\1\53"+
    "\6\17\1\0\2\17\1\53\2\17\1\122\3\0\1\17"+
    "\2\0\4\17\1\271\16\17\15\0\1\17\1\53\2\0"+
    "\1\53\4\17\1\272\1\17\1\0\2\17\1\53\2\17"+
    "\1\122\3\0\1\17\2\0\23\17\15\0\2\53\2\0"+
    "\7\53\1\0\5\53\4\0\1\53\2\0\6\53\1\273"+
    "\14\53\15\0\2\53\2\0\7\53\1\0\5\53\4\0"+
    "\1\53\2\0\13\53\1\274\7\53\15\0\2\53\2\0"+
    "\7\53\1\0\5\53\4\0\1\53\2\0\11\53\1\275"+
    "\11\53\15\0\2\53\2\0\7\53\1\0\5\53\4\0"+
    "\1\276\2\0\23\53\15\0\2\53\2\0\4\53\1\277"+
    "\2\53\1\0\5\53\4\0\1\53\2\0\23\53\15\0"+
    "\2\53\2\0\7\53\1\0\5\53\4\0\1\53\2\0"+
    "\4\53\1\300\16\53\15\0\2\53\2\0\5\53\1\301"+
    "\1\53\1\0\5\53\4\0\1\53\2\0\23\53\15\0"+
    "\2\62\2\0\7\62\1\0\5\62\4\0\1\62\2\0"+
    "\6\62\1\302\14\62\15\0\2\62\2\0\7\62\1\0"+
    "\5\62\4\0\1\62\2\0\13\62\1\303\7\62\15\0"+
    "\2\62\2\0\7\62\1\0\5\62\4\0\1\62\2\0"+
    "\11\62\1\304\11\62\15\0\2\62\2\0\7\62\1\0"+
    "\5\62\4\0\1\305\2\0\23\62\15\0\2\62\2\0"+
    "\4\62\1\306\2\62\1\0\5\62\4\0\1\62\2\0"+
    "\23\62\15\0\2\62\2\0\7\62\1\0\5\62\4\0"+
    "\1\62\2\0\4\62\1\307\16\62\15\0\2\62\2\0"+
    "\5\62\1\310\1\62\1\0\5\62\4\0\1\62\2\0"+
    "\23\62\11\0\10\70\1\311\1\262\1\311\1\262\1\311"+
    "\1\262\1\311\3\70\1\311\5\70\4\0\4\70\1\0"+
    "\2\70\1\0\1\70\6\0\15\70\4\0\2\53\2\0"+
    "\7\53\1\0\5\53\4\0\1\53\2\0\5\53\1\312"+
    "\1\273\14\53\15\0\2\53\2\0\7\53\1\0\5\53"+
    "\4\0\1\53\2\0\4\53\1\313\16\53\11\0\25\163"+
    "\1\244\4\163\1\314\35\163\4\0\2\53\2\0\7\53"+
    "\1\0\5\53\4\0\1\53\2\0\5\53\1\315\15\53"+
    "\15\0\2\53\2\0\7\53\1\0\5\53\4\0\1\53"+
    "\2\0\13\53\1\316\7\53\15\0\2\53\2\0\3\53"+
    "\1\220\3\53\1\0\5\53\4\0\1\53\2\0\23\53"+
    "\15\0\2\53\2\0\7\53\1\0\5\53\4\0\1\53"+
    "\2\0\15\53\1\317\5\53\11\0\32\107\2\0\6\107"+
    "\1\320\14\107\1\0\42\107\2\0\13\107\1\321\7\107"+
    "\1\0\42\107\2\0\11\107\1\322\11\107\1\0\41\107"+
    "\1\323\2\0\23\107\1\0\24\107\1\324\15\107\2\0"+
    "\23\107\1\0\42\107\2\0\4\107\1\325\16\107\1\0"+
    "\25\107\1\326\14\107\2\0\23\107\1\0\10\107\10\0"+
    "\7\327\3\0\1\327\51\0\1\17\1\53\2\0\1\53"+
    "\6\17\1\0\2\17\1\53\2\17\1\122\3\0\1\17"+
    "\2\0\7\17\1\330\13\17\15\0\1\17\1\53\2\0"+
    "\1\53\4\17\1\331\1\17\1\0\2\17\1\53\2\17"+
    "\1\122\3\0\1\17\2\0\23\17\15\0\1\17\1\53"+
    "\2\0\1\53\1\332\5\17\1\0\2\17\1\53\2\17"+
    "\1\122\3\0\1\17\2\0\23\17\15\0\1\17\1\53"+
    "\2\0\1\53\6\17\1\0\1\17\1\333\1\53\2\17"+
    "\1\122\3\0\1\17\2\0\23\17\15\0\1\17\1\53"+
    "\2\0\1\53\6\17\1\0\2\17\1\53\2\17\1\122"+
    "\3\0\1\17\2\0\5\17\1\334\15\17\15\0\1\17"+
    "\1\53\2\0\1\53\6\17\1\0\2\17\1\53\2\17"+
    "\1\122\3\0\1\17\2\0\20\17\1\335\2\17\15\0"+
    "\1\17\1\53\2\0\1\53\6\17\1\0\2\17\1\53"+
    "\2\17\1\122\3\0\1\17\2\0\11\17\1\336\11\17"+
    "\15\0\1\17\1\53\2\0\1\53\6\17\1\0\2\17"+
    "\1\53\2\17\1\122\3\0\1\17\2\0\16\17\1\337"+
    "\4\17\15\0\2\53\2\0\7\53\1\0\5\53\4\0"+
    "\1\53\2\0\7\53\1\340\13\53\15\0\2\53\2\0"+
    "\5\53\1\341\1\53\1\0\5\53\4\0\1\53\2\0"+
    "\23\53\15\0\2\53\2\0\1\53\1\342\5\53\1\0"+
    "\5\53\4\0\1\53\2\0\23\53\15\0\2\53\2\0"+
    "\7\53\1\0\5\53\4\0\1\53\2\0\5\53\1\343"+
    "\15\53\15\0\2\53\2\0\7\53\1\0\5\53\4\0"+
    "\1\53\2\0\20\53\1\344\2\53\15\0\2\53\2\0"+
    "\7\53\1\0\5\53\4\0\1\53\2\0\11\53\1\345"+
    "\11\53\15\0\2\53\2\0\7\53\1\0\5\53\4\0"+
    "\1\53\2\0\16\53\1\346\4\53\15\0\2\62\2\0"+
    "\7\62\1\0\5\62\4\0\1\62\2\0\7\62\1\347"+
    "\13\62\15\0\2\62\2\0\5\62\1\350\1\62\1\0"+
    "\5\62\4\0\1\62\2\0\23\62\15\0\2\62\2\0"+
    "\1\62\1\351\5\62\1\0\5\62\4\0\1\62\2\0"+
    "\23\62\15\0\2\62\2\0\7\62\1\0\5\62\4\0"+
    "\1\62\2\0\5\62\1\352\15\62\15\0\2\62\2\0"+
    "\7\62\1\0\5\62\4\0\1\62\2\0\20\62\1\353"+
    "\2\62\15\0\2\62\2\0\7\62\1\0\5\62\4\0"+
    "\1\62\2\0\11\62\1\354\11\62\15\0\2\62\2\0"+
    "\7\62\1\0\5\62\4\0\1\62\2\0\16\62\1\355"+
    "\4\62\11\0\10\70\1\356\1\327\1\356\1\327\1\356"+
    "\1\327\1\356\3\70\1\356\5\70\4\0\4\70\1\0"+
    "\2\70\1\0\1\70\6\0\15\70\4\0\2\53\2\0"+
    "\5\53\1\357\1\53\1\0\5\53\4\0\1\53\2\0"+
    "\23\53\15\0\2\53\2\0\7\53\1\0\5\53\4\0"+
    "\1\53\2\0\11\53\1\360\11\53\15\0\2\53\2\0"+
    "\5\53\1\361\1\53\1\0\5\53\4\0\1\53\2\0"+
    "\23\53\11\0\32\107\2\0\7\107\1\362\13\107\1\0"+
    "\25\107\1\363\14\107\2\0\23\107\1\0\21\107\1\364"+
    "\20\107\2\0\23\107\1\0\42\107\2\0\5\107\1\365"+
    "\15\107\1\0\42\107\2\0\20\107\1\366\2\107\1\0"+
    "\42\107\2\0\11\107\1\367\11\107\1\0\42\107\2\0"+
    "\16\107\1\370\4\107\1\0\10\107\10\0\7\371\3\0"+
    "\1\371\51\0\1\17\1\53\2\0\1\53\6\17\1\0"+
    "\2\17\1\53\2\17\1\122\3\0\1\17\2\0\10\17"+
    "\1\372\12\17\15\0\1\17\1\53\2\0\1\53\6\17"+
    "\1\0\2\17\1\53\2\17\1\122\3\0\1\17\2\0"+
    "\17\17\1\373\3\17\15\0\1\17\1\53\2\0\1\53"+
    "\2\17\1\374\3\17\1\0\2\17\1\53\2\17\1\122"+
    "\3\0\1\17\2\0\23\17\15\0\1\17\1\53\2\0"+
    "\1\53\6\17\1\0\2\17\1\53\1\17\1\375\1\122"+
    "\3\0\1\17\2\0\23\17\15\0\1\17\1\53\2\0"+
    "\1\53\1\376\5\17\1\0\2\17\1\53\2\17\1\122"+
    "\3\0\1\17\2\0\23\17\15\0\1\17\1\53\2\0"+
    "\1\53\2\17\1\377\3\17\1\0\2\17\1\53\2\17"+
    "\1\122\3\0\1\17\2\0\23\17\15\0\1\17\1\53"+
    "\2\0\1\53\4\17\1\u0100\1\17\1\0\2\17\1\53"+
    "\2\17\1\122\3\0\1\17\2\0\23\17\15\0\1\17"+
    "\1\53\2\0\1\53\6\17\1\0\2\17\1\53\2\17"+
    "\1\122\3\0\1\17\2\0\14\17\1\u0101\6\17\15\0"+
    "\2\53\2\0\7\53\1\0\5\53\4\0\1\53\2\0"+
    "\10\53\1\u0102\12\53\15\0\2\53\2\0\7\53\1\0"+
    "\5\53\4\0\1\53\2\0\17\53\1\u0103\3\53\15\0"+
    "\2\53\2\0\3\53\1\u0104\3\53\1\0\5\53\4\0"+
    "\1\53\2\0\23\53\15\0\2\53\2\0\1\53\1\u0105"+
    "\5\53\1\0\5\53\4\0\1\53\2\0\23\53\15\0"+
    "\2\53\2\0\3\53\1\u0106\3\53\1\0\5\53\4\0"+
    "\1\53\2\0\23\53\15\0\2\53\2\0\5\53\1\u0107"+
    "\1\53\1\0\5\53\4\0\1\53\2\0\23\53\15\0"+
    "\2\53\2\0\7\53\1\0\5\53\4\0\1\53\2\0"+
    "\14\53\1\u0108\6\53\15\0\2\62\2\0\7\62\1\0"+
    "\5\62\4\0\1\62\2\0\10\62\1\u0109\12\62\15\0"+
    "\2\62\2\0\7\62\1\0\5\62\4\0\1\62\2\0"+
    "\17\62\1\u010a\3\62\15\0\2\62\2\0\3\62\1\u010b"+
    "\3\62\1\0\5\62\4\0\1\62\2\0\23\62\15\0"+
    "\2\62\2\0\1\62\1\u010c\5\62\1\0\5\62\4\0"+
    "\1\62\2\0\23\62\15\0\2\62\2\0\3\62\1\u010d"+
    "\3\62\1\0\5\62\4\0\1\62\2\0\23\62\15\0"+
    "\2\62\2\0\5\62\1\u010e\1\62\1\0\5\62\4\0"+
    "\1\62\2\0\23\62\15\0\2\62\2\0\7\62\1\0"+
    "\5\62\4\0\1\62\2\0\14\62\1\u010f\6\62\11\0"+
    "\10\70\1\u0110\1\371\1\u0110\1\371\1\u0110\1\371\1\u0110"+
    "\3\70\1\u0110\5\70\4\0\4\70\1\0\2\70\1\0"+
    "\1\70\6\0\15\70\4\0\2\53\2\0\7\53\1\0"+
    "\5\53\4\0\1\53\2\0\16\53\1\u0111\4\53\15\0"+
    "\2\53\2\0\5\53\1\u0112\1\53\1\0\5\53\4\0"+
    "\1\53\2\0\23\53\15\0\2\53\2\0\4\53\1\u0113"+
    "\2\53\1\0\5\53\4\0\1\53\2\0\23\53\11\0"+
    "\32\107\2\0\10\107\1\u0114\12\107\1\0\42\107\2\0"+
    "\17\107\1\u0115\3\107\1\0\23\107\1\u0116\16\107\2\0"+
    "\23\107\1\0\21\107\1\u0117\20\107\2\0\23\107\1\0"+
    "\23\107\1\u0118\16\107\2\0\23\107\1\0\25\107\1\u0119"+
    "\14\107\2\0\23\107\1\0\42\107\2\0\14\107\1\u011a"+
    "\6\107\1\0\10\107\10\0\7\125\3\0\1\125\51\0"+
    "\1\17\1\53\2\0\1\53\4\17\1\u011b\1\17\1\0"+
    "\2\17\1\53\2\17\1\122\3\0\1\17\2\0\23\17"+
    "\15\0\1\17\1\53\2\0\1\53\6\17\1\0\2\17"+
    "\1\53\2\17\1\122\3\0\1\17\2\0\13\17\1\u011c"+
    "\7\17\15\0\1\17\1\53\2\0\1\53\6\17\1\0"+
    "\2\17\1\53\2\17\1\122\3\0\1\17\2\0\13\17"+
    "\1\u011d\7\17\15\0\1\17\1\53\2\0\1\53\6\17"+
    "\1\0\2\17\1\53\2\17\1\122\3\0\1\17\2\0"+
    "\14\17\1\u011e\6\17\15\0\1\17\1\53\2\0\1\53"+
    "\6\17\1\0\2\17\1\53\2\17\1\122\3\0\1\17"+
    "\2\0\13\17\1\u011f\7\17\15\0\1\17\1\53\2\0"+
    "\1\53\2\17\1\u0120\3\17\1\0\2\17\1\53\2\17"+
    "\1\122\3\0\1\17\2\0\23\17\15\0\2\53\2\0"+
    "\5\53\1\u0121\1\53\1\0\5\53\4\0\1\53\2\0"+
    "\23\53\15\0\2\53\2\0\7\53\1\0\5\53\4\0"+
    "\1\53\2\0\13\53\1\u0122\7\53\15\0\2\53\2\0"+
    "\7\53\1\0\5\53\4\0\1\53\2\0\13\53\1\u0123"+
    "\7\53\15\0\2\53\2\0\7\53\1\0\5\53\4\0"+
    "\1\53\2\0\14\53\1\u0124\6\53\15\0\2\53\2\0"+
    "\7\53\1\0\5\53\4\0\1\53\2\0\13\53\1\u0125"+
    "\7\53\15\0\2\53\2\0\3\53\1\u0126\3\53\1\0"+
    "\5\53\4\0\1\53\2\0\23\53\15\0\2\62\2\0"+
    "\5\62\1\u0127\1\62\1\0\5\62\4\0\1\62\2\0"+
    "\23\62\15\0\2\62\2\0\7\62\1\0\5\62\4\0"+
    "\1\62\2\0\13\62\1\u0128\7\62\15\0\2\62\2\0"+
    "\7\62\1\0\5\62\4\0\1\62\2\0\13\62\1\u0129"+
    "\7\62\15\0\2\62\2\0\7\62\1\0\5\62\4\0"+
    "\1\62\2\0\14\62\1\u012a\6\62\15\0\2\62\2\0"+
    "\7\62\1\0\5\62\4\0\1\62\2\0\13\62\1\u012b"+
    "\7\62\15\0\2\62\2\0\3\62\1\u012c\3\62\1\0"+
    "\5\62\4\0\1\62\2\0\23\62\11\0\11\70\1\125"+
    "\1\70\1\125\1\70\1\125\12\70\4\0\4\70\1\0"+
    "\2\70\1\0\1\70\6\0\15\70\4\0\2\53\2\0"+
    "\7\53\1\0\5\53\4\0\1\53\2\0\13\53\1\u012d"+
    "\7\53\11\0\15\107\1\u012e\14\107\2\0\23\107\1\0"+
    "\42\107\2\0\13\107\1\u012f\7\107\1\0\42\107\2\0"+
    "\13\107\1\u0130\7\107\1\0\42\107\2\0\14\107\1\u0131"+
    "\6\107\1\0\42\107\2\0\13\107\1\u0132\7\107\1\0"+
    "\23\107\1\u0133\16\107\2\0\23\107\1\0\10\107\4\0"+
    "\1\17\1\53\2\0\1\53\6\17\1\0\2\17\1\53"+
    "\2\17\1\122\3\0\1\17\2\0\11\17\1\u0134\11\17"+
    "\15\0\1\17\1\53\2\0\1\53\4\17\1\u0135\1\17"+
    "\1\0\2\17\1\53\2\17\1\122\3\0\1\17\2\0"+
    "\23\17\15\0\1\17\1\53\2\0\1\53\6\17\1\0"+
    "\2\17\1\53\2\17\1\122\3\0\1\17\2\0\7\17"+
    "\1\u0136\13\17\15\0\1\17\1\53\2\0\1\53\1\u0137"+
    "\5\17\1\0\2\17\1\53\2\17\1\122\3\0\1\17"+
    "\2\0\23\17\15\0\2\53\2\0\7\53\1\0\5\53"+
    "\4\0\1\53\2\0\11\53\1\u0138\11\53\15\0\2\53"+
    "\2\0\5\53\1\u0139\1\53\1\0\5\53\4\0\1\53"+
    "\2\0\23\53\15\0\2\53\2\0\7\53\1\0\5\53"+
    "\4\0\1\53\2\0\7\53\1\u013a\13\53\15\0\2\53"+
    "\2\0\1\53\1\u013b\5\53\1\0\5\53\4\0\1\53"+
    "\2\0\23\53\15\0\2\62\2\0\7\62\1\0\5\62"+
    "\4\0\1\62\2\0\11\62\1\u013c\11\62\15\0\2\62"+
    "\2\0\5\62\1\u013d\1\62\1\0\5\62\4\0\1\62"+
    "\2\0\23\62\15\0\2\62\2\0\7\62\1\0\5\62"+
    "\4\0\1\62\2\0\7\62\1\u013e\13\62\15\0\2\62"+
    "\2\0\1\62\1\u013f\5\62\1\0\5\62\4\0\1\62"+
    "\2\0\23\62\15\0\2\53\2\0\7\53\1\0\5\53"+
    "\4\0\1\53\2\0\14\53\1\u0140\6\53\11\0\32\107"+
    "\2\0\11\107\1\u0141\11\107\1\0\25\107\1\u0142\14\107"+
    "\2\0\23\107\1\0\42\107\2\0\7\107\1\u0143\13\107"+
    "\1\0\21\107\1\u0144\20\107\2\0\23\107\1\0\10\107"+
    "\4\0\1\17\1\53\2\0\1\53\6\17\1\0\2\17"+
    "\1\53\2\17\1\122\3\0\1\17\2\0\11\17\1\u0145"+
    "\11\17\15\0\1\17\1\53\2\0\1\53\6\17\1\0"+
    "\2\17\1\53\2\17\1\122\3\0\1\17\2\0\4\17"+
    "\1\u0146\16\17\15\0\1\17\1\53\2\0\1\53\6\17"+
    "\1\0\2\17\1\53\2\17\1\122\3\0\1\17\2\0"+
    "\14\17\1\u0147\6\17\15\0\2\53\2\0\7\53\1\0"+
    "\5\53\4\0\1\53\2\0\11\53\1\u0148\11\53\15\0"+
    "\2\53\2\0\7\53\1\0\5\53\4\0\1\53\2\0"+
    "\4\53\1\u0149\16\53\15\0\2\53\2\0\7\53\1\0"+
    "\5\53\4\0\1\53\2\0\14\53\1\u014a\6\53\15\0"+
    "\2\62\2\0\7\62\1\0\5\62\4\0\1\62\2\0"+
    "\11\62\1\u014b\11\62\15\0\2\62\2\0\7\62\1\0"+
    "\5\62\4\0\1\62\2\0\4\62\1\u014c\16\62\15\0"+
    "\2\62\2\0\7\62\1\0\5\62\4\0\1\62\2\0"+
    "\14\62\1\u014d\6\62\11\0\32\107\2\0\11\107\1\u014e"+
    "\11\107\1\0\42\107\2\0\4\107\1\u014f\16\107\1\0"+
    "\42\107\2\0\14\107\1\u0150\6\107\1\0\10\107\4\0"+
    "\1\17\1\53\2\0\1\53\6\17\1\0\2\17\1\53"+
    "\2\17\1\122\3\0\1\17\2\0\14\17\1\u0151\6\17"+
    "\15\0\1\17\1\53\2\0\1\53\6\17\1\0\2\17"+
    "\1\53\2\17\1\122\3\0\1\17\2\0\16\17\1\u0152"+
    "\4\17\15\0\1\17\1\53\2\0\1\53\4\17\1\u0153"+
    "\1\17\1\0\2\17\1\53\2\17\1\122\3\0\1\17"+
    "\2\0\23\17\15\0\2\53\2\0\7\53\1\0\5\53"+
    "\4\0\1\53\2\0\14\53\1\u0154\6\53\15\0\2\53"+
    "\2\0\7\53\1\0\5\53\4\0\1\53\2\0\16\53"+
    "\1\u0155\4\53\15\0\2\53\2\0\5\53\1\u0156\1\53"+
    "\1\0\5\53\4\0\1\53\2\0\23\53\15\0\2\62"+
    "\2\0\7\62\1\0\5\62\4\0\1\62\2\0\14\62"+
    "\1\u0157\6\62\15\0\2\62\2\0\7\62\1\0\5\62"+
    "\4\0\1\62\2\0\16\62\1\u0158\4\62\15\0\2\62"+
    "\2\0\5\62\1\u0159\1\62\1\0\5\62\4\0\1\62"+
    "\2\0\23\62\11\0\32\107\2\0\14\107\1\u015a\6\107"+
    "\1\0\42\107\2\0\16\107\1\u015b\4\107\1\0\25\107"+
    "\1\u015c\14\107\2\0\23\107\1\0\10\107\4\0\1\17"+
    "\1\53\2\0\1\53\6\17\1\0\2\17\1\53\2\17"+
    "\1\122\3\0\1\17\2\0\14\17\1\u015d\6\17\15\0"+
    "\2\53\2\0\7\53\1\0\5\53\4\0\1\53\2\0"+
    "\14\53\1\u015e\6\53\15\0\2\62\2\0\7\62\1\0"+
    "\5\62\4\0\1\62\2\0\14\62\1\u015f\6\62\11\0"+
    "\32\107\2\0\14\107\1\u0160\6\107\1\0\10\107";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16128];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\1\5\0\1\11\12\1\3\11\4\1\11\11"+
    "\53\1\1\11\2\0\1\11\2\0\4\1\1\11\4\1"+
    "\1\11\22\1\1\0\16\1\2\0\1\11\1\0\36\1"+
    "\1\0\14\1\1\11\1\0\31\1\1\11\12\1\1\0"+
    "\41\1\1\0\147\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[352];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    StringBuffer blockComment = new StringBuffer();
    int blockCommentLevel = 0;
    int stateBeforeComment = 0;
    int stateBeforeSemAction = 0;


  CocoLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  CocoLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2292) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 18: 
          { return CocoTypes.CURL_CLOSE;
          }
        case 47: break;
        case 30: 
          { return CocoTypes.ANY;
          }
        case 48: break;
        case 17: 
          { return CocoTypes.CURL_OPEN;
          }
        case 49: break;
        case 6: 
          { return CocoTypes.TERMINATOR;
          }
        case 50: break;
        case 14: 
          { yybegin(ATTRIBUTES); return CocoTypes.SMALLER_THEN;
          }
        case 51: break;
        case 46: 
          { yybegin(PARSER); return CocoTypes.PRODUCTIONS;
          }
        case 52: break;
        case 43: 
          { yybegin(COMMENTDECL); return CocoTypes.COMMENTS;
          }
        case 53: break;
        case 34: 
          { return CocoTypes.FROM;
          }
        case 54: break;
        case 19: 
          { return CocoTypes.BLOCK_COMMENT;
          }
        case 55: break;
        case 3: 
          { return TokenType.WHITE_SPACE;
          }
        case 56: break;
        case 21: 
          { return CocoTypes.ARBITRARY_TEXT;
          }
        case 57: break;
        case 7: 
          { return CocoTypes.PIPE;
          }
        case 58: break;
        case 39: 
          { return CocoTypes.NESTED;
          }
        case 59: break;
        case 12: 
          { return CocoTypes.PLUS;
          }
        case 60: break;
        case 25: 
          { return CocoTypes.RANGE;
          }
        case 61: break;
        case 26: 
          { blockCommentLevel--; if (blockCommentLevel == 0) {yybegin(stateBeforeComment);} return CocoTypes.BLOCK_COMMENT;
          }
        case 62: break;
        case 35: 
          { return CocoTypes.WEAK;
          }
        case 63: break;
        case 13: 
          { return CocoTypes.MINUS;
          }
        case 64: break;
        case 33: 
          { return CocoTypes.SEM_ACTION_;
          }
        case 65: break;
        case 20: 
          { yybegin(GLOBAL); return CocoTypes.IDENT;
          }
        case 66: break;
        case 45: 
          { yybegin(SCANNER); return CocoTypes.IGNORECASE;
          }
        case 67: break;
        case 40: 
          { yybegin(CHARACTERS); return CocoTypes.CONTEXT;
          }
        case 68: break;
        case 5: 
          { return CocoTypes.IDENT;
          }
        case 69: break;
        case 4: 
          { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
          }
        case 70: break;
        case 22: 
          { return CocoTypes.LINE_COMMENT;
          }
        case 71: break;
        case 8: 
          { return CocoTypes.PAR_CLOSE;
          }
        case 72: break;
        case 1: 
          { return CocoTypes.JAVACODE;
          }
        case 73: break;
        case 2: 
          { return TokenType.BAD_CHARACTER;
          }
        case 74: break;
        case 37: 
          { yybegin(TOKENS); return CocoTypes.TOKENS_;
          }
        case 75: break;
        case 23: 
          { blockCommentLevel++; if (blockCommentLevel == 1) {stateBeforeComment = yystate(); yybegin(BLOCK_COMMENT); return CocoTypes.BLOCK_COMMENT;}
          }
        case 76: break;
        case 15: 
          { return CocoTypes.BRACK_OPEN;
          }
        case 77: break;
        case 31: 
          { yybegin(YYINITIAL); return CocoTypes.END_;
          }
        case 78: break;
        case 10: 
          { yybegin(PARSER); return CocoTypes.GREATER_THEN;
          }
        case 79: break;
        case 9: 
          { return CocoTypes.PAR_OPEN;
          }
        case 80: break;
        case 16: 
          { return CocoTypes.BRACK_CLOSE;
          }
        case 81: break;
        case 42: 
          { yybegin(COMPILER); return CocoTypes.COMPILER_;
          }
        case 82: break;
        case 32: 
          { yybegin(YYINITIAL); return CocoTypes.IMPORTPATH;
          }
        case 83: break;
        case 27: 
          { return CocoTypes.TO;
          }
        case 84: break;
        case 24: 
          { return CocoTypes.STRING;
          }
        case 85: break;
        case 11: 
          { return CocoTypes.ASSIGNMENT;
          }
        case 86: break;
        case 44: 
          { yybegin(CHARACTERS); return CocoTypes.CHARACTERS_;
          }
        case 87: break;
        case 29: 
          { return CocoTypes.CHAR;
          }
        case 88: break;
        case 41: 
          { yybegin(PRAGMAS); return CocoTypes.PRAGMAS_;
          }
        case 89: break;
        case 38: 
          { yybegin(WHITESPACEDECL); return CocoTypes.IGNORE;
          }
        case 90: break;
        case 36: 
          { yybegin(YYINITIAL); return CocoTypes.IMPORT;
          }
        case 91: break;
        case 28: 
          { return CocoTypes.IF;
          }
        case 92: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
