/* The following code was generated by JFlex 1.4.3 on 25.05.14 12:17 */

package at.jku.ssw.coco.intellij;

import at.jku.ssw.coco.intellij.psi.CocoTypes;
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 25.05.14 12:17 from the specification file
 * <tt>C:/private/src/CocoR-Plugin/src/at/jku/ssw/coco/intellij/Coco.flex</tt>
 */
class CocoLexer implements FlexLexer {
    /**
     * lexical states
     */
    public static final int WAITING_VALUE = 2;
    public static final int YYINITIAL = 0;
    /**
     * the current lexical state
     */
    private int zzLexicalState = YYINITIAL;
    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;
    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     * at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
            0, 0, 1, 1
    };
    /**
     * Translates characters to character classes
     */
    private static final String ZZ_CMAP_PACKED =
            "\11\3\1\0\1\1\1\0\1\0\1\0\16\3\4\0\1\0\1\0" +
                    "\1\4\1\0\1\2\2\0\1\5\7\0\1\0\12\3\1\0\2\0" +
                    "\1\0\3\0\32\2\4\0\1\2\1\0\32\2\4\0\41\3\2\0" +
                    "\4\2\4\0\1\2\2\0\1\3\7\0\1\2\4\0\1\2\5\0" +
                    "\27\2\1\0\37\2\1\0\u01ca\2\4\0\14\2\16\0\5\2\7\0" +
                    "\1\2\1\0\1\2\21\0\160\3\5\2\1\0\2\2\2\0\4\2" +
                    "\10\0\1\2\1\0\3\2\1\0\1\2\1\0\24\2\1\0\123\2" +
                    "\1\0\213\2\1\0\5\3\2\0\236\2\11\0\46\2\2\0\1\2" +
                    "\7\0\47\2\7\0\1\2\1\0\55\3\1\0\1\3\1\0\2\3" +
                    "\1\0\2\3\1\0\1\3\10\0\33\2\5\0\3\2\15\0\5\3" +
                    "\6\0\1\2\4\0\13\3\5\0\53\2\25\3\12\3\4\0\2\2" +
                    "\1\3\143\2\1\0\1\2\10\3\1\0\6\3\2\2\2\3\1\0" +
                    "\4\3\2\2\12\3\3\2\2\0\1\2\17\0\1\3\1\2\1\3" +
                    "\36\2\33\3\2\0\131\2\13\3\1\2\16\0\12\3\41\2\11\3" +
                    "\2\2\4\0\1\2\5\0\26\2\4\3\1\2\11\3\1\2\3\3" +
                    "\1\2\5\3\22\0\31\2\3\3\104\0\1\2\1\0\13\2\67\0" +
                    "\33\3\1\0\4\3\66\2\3\3\1\2\22\3\1\2\7\3\12\2" +
                    "\2\3\2\0\12\3\1\0\7\2\1\0\7\2\1\0\3\3\1\0" +
                    "\10\2\2\0\2\2\2\0\26\2\1\0\7\2\1\0\1\2\3\0" +
                    "\4\2\2\0\1\3\1\2\7\3\2\0\2\3\2\0\3\3\1\2" +
                    "\10\0\1\3\4\0\2\2\1\0\3\2\2\3\2\0\12\3\4\2" +
                    "\7\0\1\2\5\0\3\3\1\0\6\2\4\0\2\2\2\0\26\2" +
                    "\1\0\7\2\1\0\2\2\1\0\2\2\1\0\2\2\2\0\1\3" +
                    "\1\0\5\3\4\0\2\3\2\0\3\3\3\0\1\3\7\0\4\2" +
                    "\1\0\1\2\7\0\12\3\2\3\3\2\1\3\13\0\3\3\1\0" +
                    "\11\2\1\0\3\2\1\0\26\2\1\0\7\2\1\0\2\2\1\0" +
                    "\5\2\2\0\1\3\1\2\10\3\1\0\3\3\1\0\3\3\2\0" +
                    "\1\2\17\0\2\2\2\3\2\0\12\3\1\0\1\2\17\0\3\3" +
                    "\1\0\10\2\2\0\2\2\2\0\26\2\1\0\7\2\1\0\2\2" +
                    "\1\0\5\2\2\0\1\3\1\2\7\3\2\0\2\3\2\0\3\3" +
                    "\10\0\2\3\4\0\2\2\1\0\3\2\2\3\2\0\12\3\1\0" +
                    "\1\2\20\0\1\3\1\2\1\0\6\2\3\0\3\2\1\0\4\2" +
                    "\3\0\2\2\1\0\1\2\1\0\2\2\3\0\2\2\3\0\3\2" +
                    "\3\0\14\2\4\0\5\3\3\0\3\3\1\0\4\3\2\0\1\2" +
                    "\6\0\1\3\16\0\12\3\11\0\1\2\7\0\3\3\1\0\10\2" +
                    "\1\0\3\2\1\0\27\2\1\0\12\2\1\0\5\2\3\0\1\2" +
                    "\7\3\1\0\3\3\1\0\4\3\7\0\2\3\1\0\2\2\6\0" +
                    "\2\2\2\3\2\0\12\3\22\0\2\3\1\0\10\2\1\0\3\2" +
                    "\1\0\27\2\1\0\12\2\1\0\5\2\2\0\1\3\1\2\7\3" +
                    "\1\0\3\3\1\0\4\3\7\0\2\3\7\0\1\2\1\0\2\2" +
                    "\2\3\2\0\12\3\1\0\2\2\17\0\2\3\1\0\10\2\1\0" +
                    "\3\2\1\0\51\2\2\0\1\2\7\3\1\0\3\3\1\0\4\3" +
                    "\1\2\10\0\1\3\10\0\2\2\2\3\2\0\12\3\12\0\6\2" +
                    "\2\0\2\3\1\0\22\2\3\0\30\2\1\0\11\2\1\0\1\2" +
                    "\2\0\7\2\3\0\1\3\4\0\6\3\1\0\1\3\1\0\10\3" +
                    "\22\0\2\3\15\0\60\2\1\3\2\2\7\3\4\0\10\2\10\3" +
                    "\1\0\12\3\47\0\2\2\1\0\1\2\2\0\2\2\1\0\1\2" +
                    "\2\0\1\2\6\0\4\2\1\0\7\2\1\0\3\2\1\0\1\2" +
                    "\1\0\1\2\2\0\2\2\1\0\4\2\1\3\2\2\6\3\1\0" +
                    "\2\3\1\2\2\0\5\2\1\0\1\2\1\0\6\3\2\0\12\3" +
                    "\2\0\4\2\40\0\1\2\27\0\2\3\6\0\12\3\13\0\1\3" +
                    "\1\0\1\3\1\0\1\3\4\0\2\3\10\2\1\0\44\2\4\0" +
                    "\24\3\1\0\2\3\5\2\13\3\1\0\44\3\11\0\1\3\71\0" +
                    "\53\2\24\3\1\2\12\3\6\0\6\2\4\3\4\2\3\3\1\2" +
                    "\3\3\2\2\7\3\3\2\4\3\15\2\14\3\1\2\1\3\12\3" +
                    "\4\3\2\0\46\2\1\0\1\2\5\0\1\2\2\0\53\2\1\0" +
                    "\u014d\2\1\0\4\2\2\0\7\2\1\0\1\2\1\0\4\2\2\0" +
                    "\51\2\1\0\4\2\2\0\41\2\1\0\4\2\2\0\7\2\1\0" +
                    "\1\2\1\0\4\2\2\0\17\2\1\0\71\2\1\0\4\2\2\0" +
                    "\103\2\2\0\3\3\40\0\20\2\20\0\125\2\14\0\u026c\2\2\0" +
                    "\21\2\1\0\32\2\5\0\113\2\3\0\3\2\17\0\15\2\1\0" +
                    "\4\2\3\3\13\0\22\2\3\3\13\0\22\2\2\3\14\0\15\2" +
                    "\1\0\3\2\1\0\2\3\14\0\64\2\40\3\3\0\1\2\3\0" +
                    "\2\2\1\3\2\0\12\3\41\0\3\3\2\0\12\3\6\0\130\2" +
                    "\10\0\51\2\1\3\1\2\5\0\106\2\12\0\35\2\3\0\14\3" +
                    "\4\0\14\3\12\0\12\3\36\2\2\0\5\2\13\0\54\2\4\0" +
                    "\21\3\7\2\2\3\6\0\12\3\46\0\27\2\5\3\4\0\65\2" +
                    "\12\3\1\0\35\3\2\0\1\3\12\3\6\0\12\3\15\0\1\2" +
                    "\130\0\5\3\57\2\21\3\7\2\4\0\12\3\21\0\11\3\14\0" +
                    "\3\3\36\2\15\3\2\2\12\3\54\2\16\3\14\0\44\2\24\3" +
                    "\10\0\12\3\3\0\3\2\12\3\44\2\122\0\3\3\1\0\25\3" +
                    "\4\2\1\3\4\2\3\3\2\2\11\0\300\2\47\3\25\0\4\3" +
                    "\u0116\2\2\0\6\2\2\0\46\2\2\0\6\2\2\0\10\2\1\0" +
                    "\1\2\1\0\1\2\1\0\1\2\1\0\37\2\2\0\65\2\1\0" +
                    "\7\2\1\0\1\2\3\0\3\2\1\0\7\2\3\0\4\2\2\0" +
                    "\6\2\4\0\15\2\5\0\3\2\1\0\7\2\16\0\5\3\32\0" +
                    "\5\3\20\0\2\2\23\0\1\2\13\0\5\3\5\0\6\3\1\0" +
                    "\1\2\15\0\1\2\20\0\15\2\3\0\33\2\25\0\15\3\4\0" +
                    "\1\3\3\0\14\3\21\0\1\2\4\0\1\2\2\0\12\2\1\0" +
                    "\1\2\3\0\5\2\6\0\1\2\1\0\1\2\1\0\1\2\1\0" +
                    "\4\2\1\0\13\2\2\0\4\2\5\0\5\2\4\0\1\2\21\0" +
                    "\51\2\u0a77\0\57\2\1\0\57\2\1\0\205\2\6\0\4\2\3\3" +
                    "\2\2\14\0\46\2\1\0\1\2\5\0\1\2\2\0\70\2\7\0" +
                    "\1\2\17\0\1\3\27\2\11\0\7\2\1\0\7\2\1\0\7\2" +
                    "\1\0\7\2\1\0\7\2\1\0\7\2\1\0\7\2\1\0\7\2" +
                    "\1\0\40\3\57\0\1\2\u01d5\0\3\2\31\0\11\2\6\3\1\0" +
                    "\5\2\2\0\5\2\4\0\126\2\2\0\2\3\2\0\3\2\1\0" +
                    "\132\2\1\0\4\2\5\0\51\2\3\0\136\2\21\0\33\2\65\0" +
                    "\20\2\u0200\0\u19b6\2\112\0\u51cd\2\63\0\u048d\2\103\0\56\2\2\0" +
                    "\u010d\2\3\0\20\2\12\3\2\2\24\0\57\2\1\3\4\0\12\3" +
                    "\1\0\31\2\7\0\1\3\120\2\2\3\45\0\11\2\2\0\147\2" +
                    "\2\0\4\2\1\0\4\2\14\0\13\2\115\0\12\2\1\3\3\2" +
                    "\1\3\4\2\1\3\27\2\5\3\20\0\1\2\7\0\64\2\14\0" +
                    "\2\3\62\2\21\3\13\0\12\3\6\0\22\3\6\2\3\0\1\2" +
                    "\4\0\12\3\34\2\10\3\2\0\27\2\15\3\14\0\35\2\3\0" +
                    "\4\3\57\2\16\3\16\0\1\2\12\3\46\0\51\2\16\3\11\0" +
                    "\3\2\1\3\10\2\2\3\2\0\12\3\6\0\27\2\3\0\1\2" +
                    "\1\3\4\0\60\2\1\3\1\2\3\3\2\2\2\3\5\2\2\3" +
                    "\1\2\1\3\1\2\30\0\3\2\2\0\13\2\5\3\2\0\3\2" +
                    "\2\3\12\0\6\2\2\0\6\2\2\0\6\2\11\0\7\2\1\0" +
                    "\7\2\221\0\43\2\10\3\1\0\2\3\2\0\12\3\6\0\u2ba4\2" +
                    "\14\0\27\2\4\0\61\2\u2104\0\u016e\2\2\0\152\2\46\0\7\2" +
                    "\14\0\5\2\5\0\1\2\1\3\12\2\1\0\15\2\1\0\5\2" +
                    "\1\0\1\2\1\0\2\2\1\0\2\2\1\0\154\2\41\0\u016b\2" +
                    "\22\0\100\2\2\0\66\2\50\0\15\2\3\0\20\3\20\0\7\3" +
                    "\14\0\2\2\30\0\3\2\31\0\1\2\6\0\5\2\1\0\207\2" +
                    "\2\0\1\3\4\0\1\2\13\0\12\3\7\0\32\2\4\0\1\2" +
                    "\1\0\32\2\13\0\131\2\3\0\6\2\2\0\6\2\2\0\6\2" +
                    "\2\0\3\2\3\0\2\2\3\0\2\2\22\0\3\3\4\0";
    /**
     * Translates characters to character classes
     */
    private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);
    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();
    private static final String ZZ_ACTION_PACKED_0 =
            "\2\0\1\1\1\2\2\1\2\0\1\3\1\0\1\4";
    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();
    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\6\0\14\0\22\0\30\0\36\0\44\0\52" +
                    "\0\14\0\60\0\14";
    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();
    private static final String ZZ_TRANS_PACKED_0 =
            "\1\3\1\0\1\4\1\3\1\5\1\6\1\3\1\0" +
                    "\4\3\10\0\2\4\2\0\1\7\1\0\4\7\1\10" +
                    "\1\0\4\10\4\7\1\11\1\7\5\12\6\0\1\13";
    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;
    private static final char[] EMPTY_BUFFER = new char[0];
    private static final int YYEOF = -1;
    /* error messages for the codes above */
    private static final String ZZ_ERROR_MSG[] = {
            "Unkown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };
    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();
    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\2\0\1\11\3\1\2\0\1\11\1\0\1\11";
    private static java.io.Reader zzReader = null; // Fake
    /**
     * the current state of the DFA
     */
    private int zzState;
    /**
     * this buffer contains the current text to be matched and is
     * the source of the yytext() string
     */
    private CharSequence zzBuffer = "";
    /**
     * this buffer may contains the current text array to be matched when it is cheap to acquire it
     */
    private char[] zzBufferArray;
    /**
     * the textposition at the last accepting state
     */
    private int zzMarkedPos;
    /**
     * the textposition at the last state to be included in yytext
     */
    private int zzPushbackPos;
    /**
     * the current text position in the buffer
     */
    private int zzCurrentPos;
    /**
     * startRead marks the beginning of the yytext() string in the buffer
     */
    private int zzStartRead;
    /**
     * endRead marks the last character in the buffer, that has been read
     * from input
     */
    private int zzEndRead;
    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;
    /**
     * zzAtEOF == true <=> the scanner is at the EOF
     */
    private boolean zzAtEOF;
    /**
     * denotes if the user-EOF-code has already been executed
     */
    private boolean zzEOFDone;

    CocoLexer(java.io.Reader in) {
        this.zzReader = in;
    }

    /**
     * Creates a new scanner.
     * There is also java.io.Reader version of this constructor.
     *
     * @param in the java.io.Inputstream to read input from.
     */
    CocoLexer(java.io.InputStream in) {
        this(new java.io.InputStreamReader(in));
    }

    private static int[] zzUnpackAction() {
        int[] result = new int[11];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    private static int[] zzUnpackRowMap() {
        int[] result = new int[11];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    private static int[] zzUnpackTrans() {
        int[] result = new int[54];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    private static int[] zzUnpackAttribute() {
        int[] result = new int[11];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed the packed character translation table
     * @return the unpacked character translation table
     */
    private static char[] zzUnpackCMap(String packed) {
        char[] map = new char[0x10000];
        int i = 0;  /* index in packed string  */
        int j = 0;  /* index in unpacked array */
        while (i < 2178) {
            int count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do map[j++] = value; while (--count > 0);
        }
        return map;
    }

    public final int getTokenStart() {
        return zzStartRead;
    }

    public final int getTokenEnd() {
        return getTokenStart() + yylength();
    }

    public void reset(CharSequence buffer, int start, int end, int initialState) {
        zzBuffer = buffer;
        zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
        zzCurrentPos = zzMarkedPos = zzStartRead = start;
        zzPushbackPos = 0;
        zzAtEOF = false;
        zzAtBOL = true;
        zzEndRead = end;
        yybegin(initialState);
    }

    /**
     * Refills the input buffer.
     *
     * @return <code>false</code>, iff there was new input.
     * @throws java.io.IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {
        return true;
    }


    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     */
    public final CharSequence yytext() {
        return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
    }


    /**
     * Returns the character at position <tt>pos</tt> from the
     * matched text.
     * <p>
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBufferArray != null ? zzBufferArray[zzStartRead + pos] : zzBuffer.charAt(zzStartRead + pos);
    }


    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }


    /**
     * Reports an error that occured while scanning.
     * <p>
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     * <p>
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     * <p>
     * They will be read again by then next call of the scanning method
     *
     * @param number the number of characters to be read again.
     *               This number must not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength())
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }


    /**
     * Contains user EOF-code, which will be executed exactly once,
     * when the end of file is reached
     */
    private void zzDoEOF() {
        if (!zzEOFDone) {
            zzEOFDone = true;
            return;

        }
    }


    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @throws java.io.IOException if any I/O-Error occurs
     */
    public IElementType advance() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        CharSequence zzBufferL = zzBuffer;
        char[] zzBufferArrayL = zzBufferArray;
        char[] zzCMapL = ZZ_CMAP;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];


            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL)
                        zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
                    else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;

                    int zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                case 2: {
                    yybegin(YYINITIAL);
                    return CocoTypes.IDENT;
                }
                case 5:
                    break;
                case 1: {
                    return TokenType.BAD_CHARACTER;
                }
                case 6:
                    break;
                case 3: {
                    yybegin(YYINITIAL);
                    return CocoTypes.STRING;
                }
                case 7:
                    break;
                case 4: {
                    yybegin(YYINITIAL);
                    return CocoTypes.CHAR;
                }
                case 8:
                    break;
                default:
                    if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                        zzAtEOF = true;
                        zzDoEOF();
                        return null;
                    } else {
                        zzScanError(ZZ_NO_MATCH);
                    }
            }
        }
    }


}
