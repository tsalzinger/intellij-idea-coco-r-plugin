 {
    parserClass="at.jku.ssw.coco.intellij.parser.CocoParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Coco"
    psiImplClassSuffix="Impl"
    psiPackage="at.jku.ssw.coco.intellij.psi"
    psiImplPackage="at.jku.ssw.coco.intellij.psi.impl"

    elementTypeHolderClass="at.jku.ssw.coco.intellij.psi.CocoTypes"
    elementTypeClass="at.jku.ssw.coco.intellij.psi.CocoElementType"
    tokenTypeClass="at.jku.ssw.coco.intellij.psi.CocoTokenType"

    psiImplUtilClass="at.jku.ssw.coco.intellij.psi.impl.CocoPsiImplUtil"
 }


//Cocol =
// [Imports]
// "COMPILER" ident
// [GlobalFieldsAndMethods]
// ScannerSpecification
// ParserSpecification
// "END" ident '.'
// .

Cocol ::=
    Comment?
    Imports?
    Compiler
    GlobalFieldsAndMethods?
    ScannerSpecification
    ParserSpecification
    End

//COMPILER ::= "COMPILER"

Compiler ::= COMPILER_ ident {methods=[getCompilerName]}

Imports ::= (import importpath)*
//
GlobalFieldsAndMethods ::= javacode
//
//
Comment ::= LINE_COMMENT | BLOCK_COMMENT
//
//ScannerSpecification =
// ["IGNORECASE"]
// ["CHARACTERS" {SetDecl}]
// ["TOKENS" {TokenDecl}]
// ["PRAGMAS" {PragmaDecl}]
// {CommentDecl}
// {WhiteSpaceDecl}.

ScannerSpecification ::=
    IGNORECASE?
    Characters?
    Tokens?
    Pragmas?
    CommentDecl*
    WhiteSpaceDecl*

Characters ::= CHARACTERS_ SetDecl*

//SetDecl = ident '=' Set '.'.
//Set = BasicSet {('+'|'-') BasicSet}.
//BasicSet = string | ident | char [".." char] | "ANY".

SetDecl ::= ident ASSIGNMENT Set TERMINATOR
Set ::= BasicSet ((PLUS|MINUS) BasicSet)*
BasicSet ::= string | ident | char [RANGE char] | ANY

//TokenDecl = Symbol ['=' TokenExpr '.'].
//TokenExpr = TokenTerm {'|' TokenTerm}.
//TokenTerm = TokenFactor {TokenFactor} ["CONTEXT" '(' TokenExpr ')'].
//TokenFactor = Symbol
// | '(' TokenExpr ')'
// | '[' TokenExpr ']'
// | '{' TokenExpr '}'.
//Symbol = ident | string | char.

Tokens ::= TOKENS_ TokenDecl*
TokenDecl ::= Symbol ('=' TokenExpr '.')?
TokenExpr ::= TokenTerm ('|' TokenTerm)*
TokenTerm ::= TokenFactor TokenFactor* (CONTEXT '(' TokenExpr ')')?
TokenFactor ::= Symbol
    | PAR_OPEN TokenExpr PAR_CLOSE
    | BRACK_OPEN TokenExpr BRACK_CLOSE
    | CURL_OPEN TokenExpr CURL_CLOSE
Symbol ::= ident | string | char

//PragmaDecl = TokenDecl [SemAction].
//SemAction = "(." ArbitraryStatements ".)".

Pragmas ::= PRAGMAS_ PragmaDecl*
PragmaDecl ::= TokenDecl SemAction?
//SemAction ::= SEM_ACTION_START SEM_ACTION_ SEM_ACTION_END
SemAction ::= SEM_ACTION_

//CommentDecl = "COMMENTS" "FROM" TokenExpr "TO" TokenExpr ["NESTED"].
CommentDecl ::= COMMENTS FROM TokenExpr TO TokenExpr NESTED?

//WhiteSpaceDecl = "IGNORE" Set.
WhiteSpaceDecl ::= IGNORE Set


//ParserSpecification = "PRODUCTIONS" {Production}.
//Production = ident [FormalAttributes] [LocalDecl] '=' Expression '.'.
//Expression = Term {'|' Term}.
//Term = [[Resolver] Factor {Factor}].
//Factor = ["WEAK"] Symbol [ActualAttributes]
// | '(' Expression ')'
// | '[' Expression ']'
// | '{' Expression '}'
// | "ANY"
// | "SYNC"
// | SemAction.
//Symbol = ident | string | char.
//SemAction = "(." ArbitraryStatements ".)".
//LocalDecl = SemAction.
//FormalAttributes = '<' ArbitraryText '>'.
//ActualAttributes = '<' ArbitraryText '>'.
//Resolver = "IF" '(' {ANY} ')'.

ParserSpecification ::= PRODUCTIONS Production*
Production ::= ident FormalAttributes? LocalDecl? ASSIGNMENT Expression TERMINATOR
//Production ::= ident FormalAttributes? LocalDecl? ASSIGNEMENT Expression TERMINATOR
Expression ::= Term (PIPE Term)*
Term ::= (Resolver? Factor Factor*)?
Factor ::= WEAK? Symbol ActualAttributes?
    | PAR_OPEN Expression PAR_CLOSE
    | BRACK_OPEN Expression BRACK_CLOSE
    | CURL_OPEN Expression CURL_CLOSE
| ANY
| SYNC
| SemAction
LocalDecl ::= SemAction
FormalAttributes ::= Attributes
ActualAttributes ::= Attributes
private Attributes ::= SMALLER_THEN ARBITRARY_TEXT GREATER_THEN
Resolver ::= IF PAR_OPEN ANY* PAR_CLOSE

End ::= END_ ident TERMINATOR
